{
    "pipes": [
        {
            "name": "ElementFilterPipe",
            "id": "pipe-ElementFilterPipe-75026017aab5604d79d9353fcbd7cb60",
            "file": "src/app/shared/pipes/element-filter/element-filter.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "NodeList"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "NodeList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "elementFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'elementFilter'\n})\nexport class ElementFilterPipe implements PipeTransform {\n\n\ttransform(value: NodeList): any {\n\t\tif(!value) return [];\n\t\treturn Array.from(value).filter(e => e.nodeType !== Node.COMMENT_NODE);\n\t}\n\n}\n"
        },
        {
            "name": "RouteFilterPipe",
            "id": "pipe-RouteFilterPipe-f295f11d03fe6846dc4094ef6ef77425",
            "file": "src/app/shared/routeFilter/route-filter.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "DanceSchedulerRoute[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "DanceSchedulerRoute[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "routeFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { UserAuthService } from 'src/app/services/userAuth/user-auth.service';\nimport { DanceSchedulerRoute } from '../../routeDefintions';\n\n@Pipe({\n\tname: 'routeFilter',\n\tpure: false,\n})\nexport class RouteFilterPipe implements PipeTransform {\n\n\tconstructor(private userService: UserAuthService) {}\n\n  transform(value: DanceSchedulerRoute[]): unknown {\n\t\treturn value.filter(r => {\n\t\t\treturn this.userService.canViewRoute(r);\n\t\t});\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AgeGroupType",
            "id": "interface-AgeGroupType-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "fromAge",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "toAge",
                    "type": "number | plus | \"\"",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Sortable"
        },
        {
            "name": "Category",
            "id": "interface-Category-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Sortable"
        },
        {
            "name": "Competition",
            "id": "interface-Competition-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "ageGroups",
                    "type": "AgeGroupType[]",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "categories",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "dancers",
                    "type": "Dancer[]",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "dances",
                    "type": "Dance[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "dateOfComp",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "finished",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "heats",
                    "type": "Heat[]",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "judges",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "multiDances",
                    "type": "MultiDance[]",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "multiEventAgeGroups",
                    "type": "AgeGroupType[]",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "multiEventSkillLevels",
                    "type": "SkillLevel[]",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "skillLevels",
                    "type": "SkillLevel[]",
                    "optional": false,
                    "description": "",
                    "line": 88
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SocialEvent"
        },
        {
            "name": "Couple",
            "id": "interface-Couple-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "danceCounts",
                    "type": "Map<CoupledDance | number>",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "dancers",
                    "type": "[Dancer, Dancer]",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CoupledDance",
            "id": "interface-CoupledDance-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "dance",
                    "type": "DanceCommon",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "skillLevel",
                    "type": "SkillLevel",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Dance",
            "id": "interface-Dance-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "shortName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "DanceCommon"
        },
        {
            "name": "DanceCommon",
            "id": "interface-DanceCommon-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "categoryId",
                    "type": "DataKey",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "linkedDanceIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Sortable"
        },
        {
            "name": "DanceDto",
            "id": "interface-DanceDto-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "shortName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "DanceDtoCommon"
        },
        {
            "name": "DanceDtoCommon",
            "id": "interface-DanceDtoCommon-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "category",
                    "type": "Category",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "linkedDances",
                    "type": "Dance[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Sortable"
        },
        {
            "name": "Dancer",
            "id": "interface-Dancer-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "couples",
                    "type": "Couple[]",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Person"
        },
        {
            "name": "DanceSchedulerRoute",
            "id": "interface-DanceSchedulerRoute-6946525f89e694521acad4d78cd937af",
            "file": "src/app/routeDefintions.ts",
            "type": "interface",
            "sourceCode": "import { Route } from '@angular/router';\nimport { PersonListComponent } from './person-list/person-list.component';\nimport { CoupleListComponent } from './couple-list/couple-list.component';\nimport { CompRulesSetupComponent } \n\tfrom './comp-rules-setup/comp-rules-setup.component';\nimport { HomeComponent } from './home/home.component';\nimport { SchoolListComponent } from './school-list/school-list.component';\n\nexport enum ModeAccess {\n\tAll,\n\tCompetitionSetup,\n};\n\nexport enum RoleAccess {\n\tAll,\n\tAdminOnly,\n\tJudge\n}\n\nexport interface DisplayRoute {\n\tdisplay: string,\n\tmodeFilter: ModeAccess,\n\troleFilter: RoleAccess,\n};\n\nexport interface DanceSchedulerRoute extends Route, DisplayRoute { };\n\nexport const allRoutes: DanceSchedulerRoute[] = [\n\t{\n\t\tpath: '',\n\t\tcomponent: HomeComponent,\n\t\tdisplay: 'Home',\n\t\tmodeFilter: ModeAccess.All,\n\t\troleFilter: RoleAccess.All\n\t},\n\t{ \n\t\tpath: 'dancers', \n\t\tcomponent: PersonListComponent, \n\t\tdisplay: 'Dancers', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n\t{\n\t\tpath: 'schools',\n\t\tcomponent: SchoolListComponent,\n\t\tdisplay: 'Schools',\n\t\tmodeFilter: ModeAccess.All,\n\t\troleFilter: RoleAccess.AdminOnly\n\t},\n\t{ \n\t\tpath: 'couples', \n\t\tcomponent: CoupleListComponent, \n\t\tdisplay: 'Couples', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n\t{ \n\t\tpath: 'compVars', \n\t\tcomponent: CompRulesSetupComponent, \n\t\tdisplay: 'Variations', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n];",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Route"
        },
        {
            "name": "DirectionEventArg",
            "id": "interface-DirectionEventArg-7ba97b2dbaab77367467c33ce70b3c15",
            "file": "src/app/types/directions.ts",
            "type": "interface",
            "sourceCode": "export enum Direction {\n\tUp,\n\tDown,\n\tLeft,\n\tRight\n};\n\nexport type ElevatorDir = Direction.Up | Direction.Down;\n\nexport interface DirectionEventArg<T> {\n\titem: T,\n\tdirection: ElevatorDir,\n};",
            "properties": [
                {
                    "name": "direction",
                    "type": "ElevatorDir",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "item",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DisplayRoute",
            "id": "interface-DisplayRoute-6946525f89e694521acad4d78cd937af",
            "file": "src/app/routeDefintions.ts",
            "type": "interface",
            "sourceCode": "import { Route } from '@angular/router';\nimport { PersonListComponent } from './person-list/person-list.component';\nimport { CoupleListComponent } from './couple-list/couple-list.component';\nimport { CompRulesSetupComponent } \n\tfrom './comp-rules-setup/comp-rules-setup.component';\nimport { HomeComponent } from './home/home.component';\nimport { SchoolListComponent } from './school-list/school-list.component';\n\nexport enum ModeAccess {\n\tAll,\n\tCompetitionSetup,\n};\n\nexport enum RoleAccess {\n\tAll,\n\tAdminOnly,\n\tJudge\n}\n\nexport interface DisplayRoute {\n\tdisplay: string,\n\tmodeFilter: ModeAccess,\n\troleFilter: RoleAccess,\n};\n\nexport interface DanceSchedulerRoute extends Route, DisplayRoute { };\n\nexport const allRoutes: DanceSchedulerRoute[] = [\n\t{\n\t\tpath: '',\n\t\tcomponent: HomeComponent,\n\t\tdisplay: 'Home',\n\t\tmodeFilter: ModeAccess.All,\n\t\troleFilter: RoleAccess.All\n\t},\n\t{ \n\t\tpath: 'dancers', \n\t\tcomponent: PersonListComponent, \n\t\tdisplay: 'Dancers', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n\t{\n\t\tpath: 'schools',\n\t\tcomponent: SchoolListComponent,\n\t\tdisplay: 'Schools',\n\t\tmodeFilter: ModeAccess.All,\n\t\troleFilter: RoleAccess.AdminOnly\n\t},\n\t{ \n\t\tpath: 'couples', \n\t\tcomponent: CoupleListComponent, \n\t\tdisplay: 'Couples', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n\t{ \n\t\tpath: 'compVars', \n\t\tcomponent: CompRulesSetupComponent, \n\t\tdisplay: 'Variations', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n];",
            "properties": [
                {
                    "name": "display",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "modeFilter",
                    "type": "ModeAccess",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "roleFilter",
                    "type": "RoleAccess",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Heat",
            "id": "interface-Heat-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "couples",
                    "type": "Couple[]",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "dance",
                    "type": "Dance",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "impossible",
                    "type": "Set<Couple>",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "num",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IdSelectable",
            "id": "interface-IdSelectable-4c791b8f034760d037e1cff5a12634ac",
            "file": "src/app/types/id-selectable.ts",
            "type": "interface",
            "sourceCode": "import { DataKey } from './data-key';\n\nexport interface IdSelectable {\n\tid: DataKey\n};\n\n",
            "properties": [
                {
                    "name": "id",
                    "type": "DataKey",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MultiDance",
            "id": "interface-MultiDance-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DanceCommon"
        },
        {
            "name": "MultiDanceDto",
            "id": "interface-MultiDanceDto-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DanceDtoCommon"
        },
        {
            "name": "NameDisplayable",
            "id": "interface-NameDisplayable-5de25b82539bc956f1656f3762591db0",
            "file": "src/app/types/name-displayable.ts",
            "type": "interface",
            "sourceCode": "export interface NameDisplayable {\n\tname: string,\n};",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "OptionInfo",
            "id": "interface-OptionInfo-ea5533116254e2c3571c611fb442316a",
            "file": "src/app/types/option-info.ts",
            "type": "interface",
            "sourceCode": "import { IdSelectable } from './id-selectable';\n\nexport interface OptionInfo<T = unknown>  extends IdSelectable {\n\tassociatedObject?: T,\n\tdisplay: string,\n};",
            "properties": [
                {
                    "name": "associatedObject",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "display",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IdSelectable"
        },
        {
            "name": "Person",
            "id": "interface-Person-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "schoolId",
                    "type": "DataKey",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "PersonBase"
        },
        {
            "name": "PersonBase",
            "id": "interface-PersonBase-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IdSelectable"
        },
        {
            "name": "PersonDto",
            "id": "interface-PersonDto-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "school",
                    "type": "School",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "PersonBase"
        },
        {
            "name": "Role",
            "id": "interface-Role-fbfcdf2fe0bcba156133ef08afdc080f",
            "file": "src/app/types/user.ts",
            "type": "interface",
            "sourceCode": "import { RoleType } from './roles';\n\nexport interface Role {\n\tname: RoleType,\n};\n\nexport interface User {\n\tuserName: string,\n\troles: Role[],\n}",
            "properties": [
                {
                    "name": "name",
                    "type": "RoleType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "School",
            "id": "interface-School-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [
                {
                    "name": "location",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "DataBasic"
        },
        {
            "name": "SelectConfig",
            "id": "interface-SelectConfig-20a680dda1e2c75cbe050b4dab7d9a09",
            "file": "src/app/shared/components/select/select-config.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { SelectOptionComponent } from './select-option/select-option.component';\nimport { SelectRegistration } from './select-registration';\n\n\nexport interface SelectConfig {\n\tallowMultiSelect: boolean,\n\tcontrolName: string,\n\tonClickCallback: (option: SelectOptionComponent) => void,\n\tregister: () => SelectRegistration,\n\tselectedSet: Set<unknown>\n};\n\nexport const SELECT_CONFIG = \n\tnew InjectionToken<BehaviorSubject<SelectConfig>>(\n\t'select config'\n);",
            "properties": [
                {
                    "name": "allowMultiSelect",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "controlName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "onClickCallback",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "register",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedSet",
                    "type": "Set<unknown>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SkillLevel",
            "id": "interface-SkillLevel-1cd7c6bea76b69ddf72a46ffe58c45e8",
            "file": "src/app/types/data-shape.ts",
            "type": "interface",
            "sourceCode": "import { Sortable } from './sortable';\nimport { DataKey } from './data-key';\nimport { IdSelectable } from './id-selectable';\nimport { NameDisplayable } from './name-displayable';\nimport { DataBasic } from './data-basic';\nimport { SocialEvent } from './social-event';\n\nexport type plus = '+'\n\nexport interface AgeGroupType extends Sortable, DataBasic {\n\tfromAge: number,\n\ttoAge: number | plus | '',\n};\n\nexport interface Category extends Sortable, DataBasic {\n};\n\nexport interface DanceCommon extends Sortable, IdSelectable {\n\tcategoryId: DataKey,\n\tlinkedDanceIds: string[],\n}\n\nexport interface DanceDtoCommon extends Sortable, IdSelectable {\n\tcategory: Category,\n\tlinkedDances: Dance[],\n}\n\nexport interface Dance extends DanceCommon, NameDisplayable {\n\tshortName: string,\n};\n\nexport interface DanceDto extends DanceDtoCommon, NameDisplayable {\n\tshortName: string,\n}\n\nexport interface MultiDance extends DanceCommon {}\n\nexport interface MultiDanceDto extends DanceDtoCommon {}\n\nexport interface SkillLevel extends Sortable, DataBasic {\n}\n\nexport interface CoupledDance {\n\tskillLevel: SkillLevel,\n\tdance: DanceCommon,\n};\n\nexport interface School extends DataBasic {\n\tlocation: string,\n}\n\nexport interface PersonBase extends IdSelectable {\n\tfirstName: string,\n\tlastName: string,\n}\n\nexport interface Person extends PersonBase {\n\tschoolId: DataKey,\n}\n\nexport interface PersonDto extends PersonBase {\n\tschool: School,\n}\n\nexport interface Couple {\n\tdanceCounts: Map<CoupledDance, number>,\n\tdancers: [Dancer, Dancer],\n};\n\nexport interface Dancer extends Person {\n\tcouples: Couple[],\n};\n\nexport interface Heat {\n\tnum: number,\n\tdance: Dance,\n\tcouples: Couple[],\n\timpossible: Set<Couple>,\n};\n\n\nexport interface Competition extends SocialEvent {\n\tageGroups: AgeGroupType[],\n\tmultiEventAgeGroups: AgeGroupType[],\n\tcategories: Category[],\n\tdances: Dance[],\n\tmultiDances: MultiDance[],\n\tskillLevels: SkillLevel[],\n\tmultiEventSkillLevels: SkillLevel[],\n\tdancers: Dancer[],\n\theats: Heat[],\n\tjudges: Person[],\n\tdateOfComp: Date,\n\tfinished: boolean,\n};\n\n\nexport type TableTypes = Competition | Person | School;\n\nexport type CompSubType = AgeGroupType | Category | Dance | \n\tSkillLevel | MultiDance;",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Sortable"
        },
        {
            "name": "SocialEvent",
            "id": "interface-SocialEvent-e70d026a608f1329351a50b3a35498d4",
            "file": "src/app/types/social-event.ts",
            "type": "interface",
            "sourceCode": "import { DataBasic } from './data-basic';\nimport { TouchedTimestamp } from './touch-timestamp';\n\nexport interface SocialEvent extends DataBasic, TouchedTimestamp{\n\teventDate: Date;\n}",
            "properties": [
                {
                    "name": "eventDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "DataBasic"
        },
        {
            "name": "TableStats",
            "id": "interface-TableStats-8d4312acde1f00260c11979e6dad36c8",
            "file": "src/app/types/table-stats.ts",
            "type": "interface",
            "sourceCode": "export interface TableStats {\n\titemCount: number,\n\tloading: boolean\n}",
            "properties": [
                {
                    "name": "itemCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TagsConfig",
            "id": "interface-TagsConfig-e88075305dd67b90b72b44c742745b61",
            "file": "src/app/shared/components/select/tags-config.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { DSInput } from 'src/app/types/ds-input';\nimport { SelectRegistration } from './select-registration';\n\n\nexport interface TagsConfig {\n\tcontrolName: string,\n\tonClickCallback: (option: DSInput) => void,\n\tregister: () => SelectRegistration,\n\tshowXButton: boolean,\n};\n\nexport const TAGS_CONFIG = \n\tnew InjectionToken<BehaviorSubject<TagsConfig>>(\n\t'tag config'\n);",
            "properties": [
                {
                    "name": "controlName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "onClickCallback",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "register",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "showXButton",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TouchedTimestamp",
            "id": "interface-TouchedTimestamp-88acbd47cd3b856181624b7932a85ab4",
            "file": "src/app/types/touch-timestamp.ts",
            "type": "interface",
            "sourceCode": "export interface TouchedTimestamp {\n\tlastUpdated: Date,\n\tcreateDate: Date,\n}",
            "properties": [
                {
                    "name": "createDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lastUpdated",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-fbfcdf2fe0bcba156133ef08afdc080f",
            "file": "src/app/types/user.ts",
            "type": "interface",
            "sourceCode": "import { RoleType } from './roles';\n\nexport interface Role {\n\tname: RoleType,\n};\n\nexport interface User {\n\tuserName: string,\n\troles: Role[],\n}",
            "properties": [
                {
                    "name": "roles",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BrowserDbService",
            "id": "injectable-BrowserDbService-107cc8757c7942e4fba9dbfc858e06ba",
            "file": "src/app/services/browser-Db/browser-db.service.ts",
            "properties": [
                {
                    "name": "db",
                    "type": "IDBPDatabase",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "deleteValue",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllValues",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TableTypes[]>",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TableTypes>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDb",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<IDBPDatabase | \"undefined\">",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "putValue",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IDBValidKey>",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TableTypes } from '../../types/data-shape';\nimport { openDB, IDBPDatabase } from 'idb';\n\nconst DANCE_SCHEDULER_LOCAL_DB_VERSION = 1;\nconst DANCE_SCHEDULER_LOCAL_DB_NAME = \"danceSchedulerLocalDb\"\nexport const COMPETITION_TABLE_NAME = 'competitions';\nexport const PEOPLE_TABLE_NAME = 'people';\nexport const SCHOOL_TABLE_NAME = 'schools';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrowserDbService {\n\n\tdb: IDBPDatabase;\n\tisOpen = false;\n\n\tconstructor() { }\n\n\tasync openDb(): Promise<IDBPDatabase | false> {\n\t\ttry {\n\t\t\tthis.db = await openDB(DANCE_SCHEDULER_LOCAL_DB_NAME, \n\t\t\t\tDANCE_SCHEDULER_LOCAL_DB_VERSION, {\n\t\t\t\t\tupgrade(db: IDBPDatabase) {\n\t\t\t\t\t\tif(!db.objectStoreNames.contains(PEOPLE_TABLE_NAME)) {\n\t\t\t\t\t\t\tconst personStore = db.createObjectStore(PEOPLE_TABLE_NAME, \n\t\t\t\t\t\t\t\t{ autoIncrement : false, keyPath: 'id' });\n\t\t\t\t\t\t\tpersonStore.createIndex('id', 'id');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!db.objectStoreNames.contains(COMPETITION_TABLE_NAME)) {\n\t\t\t\t\t\t\tconst compStore = db.createObjectStore(COMPETITION_TABLE_NAME, \n\t\t\t\t\t\t\t\t{ autoIncrement : false, keyPath: 'id' });\n\t\t\t\t\t\t\tcompStore.createIndex('id', 'id');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!db.objectStoreNames.contains(SCHOOL_TABLE_NAME)) {\n\t\t\t\t\t\t\tconst schoolStore = db.createObjectStore(SCHOOL_TABLE_NAME, \n\t\t\t\t\t\t\t\t{ autoIncrement : false, keyPath: 'id' });\n\t\t\t\t\t\t\tschoolStore.createIndex('id', 'id');\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\tthis.isOpen = true;\n\t\t}\n\t\tcatch(err){ \n\t\t\tconsole.error(err);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tasync getValue(tableName: string, id: any): Promise<TableTypes> {\n\t\tconst transaction = this.db.transaction(tableName, 'readonly');\n\t\tconst store = transaction.objectStore(tableName);\n\t\treturn await store.get(id); \n\t}\n\n\tasync getAllValues(tableName: string): Promise<TableTypes[]> {\n\t\tconst transaction = this.db.transaction(tableName, 'readonly');\n\t\tconst store = transaction.objectStore(tableName);\n\t\treturn await store.getAll();\n\t}\n\n\tasync putValue(tableName: string, value: any) \n\t\t: Promise<IDBValidKey> \n\t{\n\t\tconst transaction = this.db.transaction(tableName, 'readwrite');\n\t\tconst store = transaction.objectStore(tableName);\n\t\tconst result = await store.put(value);\n\t\treturn result;\n\t}\n\n\tasync deleteValue(tableName: string, id: any): Promise<void> {\n\t\tconst transaction = this.db.transaction(tableName, 'readwrite');\n\t\tconst store = transaction.objectStore(tableName);\n\t\tawait store.delete(id);\n\t}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        },
        {
            "name": "CompetitionSetupService",
            "id": "injectable-CompetitionSetupService-71011a594a21bfdf4225e2d37645d261",
            "file": "src/app/services/competition-setup/competition-setup.service.ts",
            "properties": [
                {
                    "name": "allCompetitions$",
                    "defaultValue": "new BehaviorSubject<Competition[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "competitions",
                    "type": "Competition[]",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "competitions$",
                    "defaultValue": "new BehaviorSubject<Competition>({ ...compBaseShape})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentCompetition",
                    "type": "Competition",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentCompetitionIdx",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_subscribeCommon",
                    "args": [
                        {
                            "name": "subject$",
                            "type": "Subject<T>"
                        },
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<T> |  | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 91,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "subject$",
                            "type": "Subject<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<T> |  | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_triggerLoadItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "T"
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices"
                        }
                    ],
                    "optional": false,
                    "returnType": "U[]",
                    "typeParameters": [
                        "T",
                        "U"
                    ],
                    "line": 147,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "arraySubscribe",
                    "args": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<Competition[]> |  | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<Competition[]> |  | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "CompKeyChoices"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 189,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "CompKeyChoices",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeNewComp",
                    "args": [
                        {
                            "name": "id",
                            "type": "DataKey"
                        }
                    ],
                    "optional": false,
                    "returnType": "Competition",
                    "typeParameters": [],
                    "line": 197,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "DataKey",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "T"
                        },
                        {
                            "name": "direction",
                            "type": "ElevatorDir"
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "direction",
                            "type": "ElevatorDir",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItems",
                    "args": [
                        {
                            "name": "filter",
                            "type": "function",
                            "function": [
                                {
                                    "name": "t",
                                    "type": "T"
                                }
                            ]
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 179,
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "function",
                            "function": [
                                {
                                    "name": "t",
                                    "type": "T"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replaceAll",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]"
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 133,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "T"
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "CompKeyChoices",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<Competition> |  | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<Competition> |  | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Unsubscribable, PartialObserver, BehaviorSubject, Subject } from 'rxjs';\nimport { Competition, CompSubType } \n\tfrom '../../types/data-shape';\nimport { BrowserDbService, COMPETITION_TABLE_NAME } \n\tfrom '../browser-Db/browser-db.service';\nimport { getLatestIdx, immutableReplace, swap } from '../../shared/utils/arrayHelpers';\nimport { Direction, ElevatorDir } from '../../types/directions';\nimport { v4 } from 'uuid';\nimport { OpQueueService } from '../op-queue/op-queue.service';\nimport { DEFAULT_COMPETITION, EMPTY_COMPETITION } from '../../types/constants';\nimport { DataKey } from '../../types/data-key';\n\n\nexport enum CompKeys {\n\tageGroups = 'ageGroups',\n\tcategories = 'categories',\n\tdances = 'dances',\n\tmultiDances = 'multiDances',\n\tskillLevels = 'skillLevels',\n\tmultiEventAgeGroups = 'multiEventAgeGroups',\n\tmultiEventSkillLevels = 'multiEventSkillLevels',\n}\n\nexport type CompKeyChoices = keyof typeof CompKeys;\n\nconst compBaseShape : Competition = {\n\tid: null,\n\tname: '',\n\tageGroups: [],\n\tmultiEventAgeGroups: [],\n\tcategories: [],\n\tdances: [],\n\tmultiDances: [],\n\tskillLevels: [],\n\tmultiEventSkillLevels: [],\n\tdancers: [],\n\theats: [],\n\tjudges: [],\n\tdateOfComp: null,\n\teventDate: null,\n\tlastUpdated: null,\n\tfinished: false,\n\tcreateDate: null,\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompetitionSetupService {\n\n\tprivate competitions: Competition[];\n\tprivate currentCompetitionIdx = -1;\n\tprivate currentCompetition: Competition;\n\tprivate competitions$ = new BehaviorSubject<Competition>({ ...compBaseShape});\n\tprivate allCompetitions$ = new BehaviorSubject<Competition[]>([]);\n\n\tconstructor(private browserDb: BrowserDbService, \n\t\tprivate opQueue: OpQueueService) \n\t{ \n\t}\n\n\t\n\tasync _triggerLoadItems() : Promise<void> {\n\t\tif(this.currentCompetitionIdx > -1 && this.browserDb.isOpen) {\n\t\t\treturn;\n\t\t}\n\t\tif(!this.browserDb.isOpen) {\n\t\t\tawait this.browserDb.openDb();\n\t\t}\n\t\tconst values = await this.browserDb.getAllValues(COMPETITION_TABLE_NAME);\n\t\tthis.competitions = values as Competition[];\n\t\tif(this.competitions?.length) {\n\t\t\t//get most recent\n\t\t\tthis.currentCompetitionIdx = getLatestIdx(this.competitions);\n\t\t}\n\t\telse {\n\t\t\tthis.currentCompetitionIdx = 0;\n\t\t\tthis.competitions = [\n\t\t\t\t{ ...compBaseShape, \n\t\t\t\t\tid: v4(),\n\t\t\t\t\tcreateDate: new Date(),\n\t\t\t\t\tlastUpdated: new Date(),\n\t\t\t\t}\n\t\t\t];\n\t\t}\n\t\tthis.competitions$.next(this.competitions[this.currentCompetitionIdx]);\n\t\tthis.allCompetitions$.next(this.competitions);\n\t}\n\n\tprivate _subscribeCommon<T>(subject$: Subject<T>, \n\t\tobserverOrNext?: PartialObserver<T> | \n\t\t((value: T) => void) | null,\n\t\terror?: ((error: any) => void) | null,\n\t\tcomplete?: (() => void) | null): Unsubscribable \n\t{\n\t\tlet unsub;\n\t\tif(typeof observerOrNext === 'function') {\n\t\t\tunsub = subject$.subscribe(observerOrNext, error, complete);\n\t\t}\n\t\telse if(typeof observerOrNext === 'object') {\n\t\t\tunsub = subject$.subscribe(observerOrNext);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error('Invalid argument.');\n\t\t}\n\t\tthis.opQueue.enqueueOp(() => this._triggerLoadItems());\n\t\treturn unsub;\n\t}\n\t\n\n\tsubscribe(\n\t\tobserverOrNext?: PartialObserver<Competition> | \n\t\t\t((value: Competition) => void) | null,\n\t\terror?: ((error: any) => void) | null,\n\t\tcomplete?: (() => void) | null\n\t\t): Unsubscribable \n\t{\n\t\treturn this._subscribeCommon(this.competitions$, \n\t\t\tobserverOrNext, error, complete);\n\t}\n\n\tarraySubscribe(\n\t\tobserverOrNext?: PartialObserver<Competition[]> | \n\t\t\t((value: Competition[]) => void) | null,\n\t\terror?: ((error: any) => void) | null,\n\t\tcomplete?: (() => void) | null\n\t\t): Unsubscribable {\n\t\t\treturn this._subscribeCommon(this.allCompetitions$, \n\t\t\t\tobserverOrNext, error, complete);\n\t}\n\n\treplaceAll<T extends CompSubType>(items: T[], key: CompKeyChoices): void {\n\t\tconst currentCompetition = {\n\t\t\t...this.competitions[this.currentCompetitionIdx],\n\t\t\t[key]: items,\n\t\t\tlastUpdated: new Date()\n\t\t};\n\t\tthis.browserDb.putValue(COMPETITION_TABLE_NAME, currentCompetition);\n\t\tthis.competitions$.next(currentCompetition);\n\t\tthis.competitions = immutableReplace(this.competitions, \n\t\t\tcurrentCompetition, \n\t\t\tthis.currentCompetitionIdx);\n\t\tthis.allCompetitions$.next(this.competitions);\n\t}\n\n\taddItem<T extends CompSubType, U extends CompSubType>\n\t\t(item: T, key: CompKeyChoices): U[]\n\t{\n\t\tconst currentCompetition = this.competitions[this.currentCompetitionIdx];\n\t\tconst items = [...currentCompetition[key]] || [];\n\t\titem.order = items.length;\n\t\titem.id =  v4();\n\t\titems.push(item as any);\n\t\treturn items as unknown as U[];\n\t}\n\n\tsaveItem<T extends CompSubType>\n\t\t(item: T, key: CompKeyChoices): void \n\t{\n\t\tconst expandedList = this.addItem(item, key);\n\t\tthis.replaceAll(expandedList, key);\n\t}\n\n\tmoveItem<T extends CompSubType>(item: T, direction: ElevatorDir, \n\t\tkey: CompKeyChoices): void \n\t{\n\t\tconst currentCompetition = this.competitions[this.currentCompetitionIdx];\n\t\tconst items = [...currentCompetition[key]];\n\t\tconst increment = direction === Direction.Up ? 1 : -1;\n\t\tif(swap(items, item.order, item.order + increment)) {\n\t\t\tconst swapped = items[item.order];\n\t\t\tswapped.order -= increment;\n\t\t\titem.order += increment;\n\t\t\tthis.replaceAll(items, key);\n\t\t}\n\t}\n\n\tremoveItems<T extends CompSubType>(filter: (t:T) => boolean, \n\t\tkey: CompKeyChoices): void \n\t{\n\t\tconst currentCompetition = this.competitions[this.currentCompetitionIdx];\n\t\tconst data = currentCompetition[key] as any;\n\t\tif(data instanceof Array) {\n\t\t\tthis.replaceAll(data.filter(filter), key);\n\t\t}\n\t}\n\n\tget<T extends CompSubType>(key: CompKeyChoices): T[] {\n\t\tconst currentCompetition = this.competitions[this.currentCompetitionIdx];\n\t\tif(!currentCompetition[key]) {\n\t\t\treturn [];\n\t\t}\n\t\treturn currentCompetition[key] as unknown as T[];\n\t}\n\n\tinitializeNewComp(id: DataKey): Competition {\n\t\tif(id === DEFAULT_COMPETITION) {}\n\t\telse if(id === EMPTY_COMPETITION) {}\n\t\telse {}\n\t\treturn null;\n\t}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "browserDb",
                        "type": "BrowserDbService"
                    },
                    {
                        "name": "opQueue",
                        "type": "OpQueueService"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "browserDb",
                        "type": "BrowserDbService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "opQueue",
                        "type": "OpQueueService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ListService",
            "id": "injectable-ListService-ad2710e5db65af249fec220d528e9570",
            "file": "src/app/services/list/list.service.ts",
            "properties": [
                {
                    "name": "cachedItems",
                    "defaultValue": "new Map<DataKey, U>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "items",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "items$",
                    "defaultValue": "new BehaviorSubject<U[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "25",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sortFn",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "stats$",
                    "defaultValue": "new BehaviorSubject<TableStats>({\n\t\titemCount: 0,\n\t\tloading: true,\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "tableName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_sendNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_sendNextStats",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_triggerLoadItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "asObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<U[]>",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "getItemById",
                    "args": [
                        {
                            "name": "id",
                            "type": "DataKey"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<U | null>",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "DataKey",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "T | U"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T | U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replaceAll",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "U"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<U[]> |  | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<U[]> |  | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeStats",
                    "args": [
                        {
                            "name": "next",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "t",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "U | Promise",
                    "typeParameters": [],
                    "line": 154,
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformInverse",
                    "args": [
                        {
                            "name": "u",
                            "type": "U"
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "u",
                            "type": "U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { \n\tUnsubscribable, \n\tSubscribable, \n\tObservable, \n\tPartialObserver,\n\tfrom, \n\tBehaviorSubject } from 'rxjs';\nimport { TableTypes } from '../../types/data-shape';\nimport { BrowserDbService } from '../browser-Db/browser-db.service';\nimport { v4 } from 'uuid';\nimport { IdSelectable } from '../../types/id-selectable';\nimport { DataKey } from '../../types/data-key';\nimport { TableStats } from '../../types/table-stats';\nimport { OpQueueService } from '../op-queue/op-queue.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ListService<T extends TableTypes, U extends IdSelectable = T> \n\timplements Subscribable<U[]> {\n\n\tpageSize = 25;\n\tcurrentPage = 0;\n\tsortFn: (a: T, b: T) => number;\n\tprivate items: T[];\n\tprivate items$ = new BehaviorSubject<U[]>([]);\n\tprivate stats$ = new BehaviorSubject<TableStats>({\n\t\titemCount: 0,\n\t\tloading: true,\n\t});\n\tprivate cachedItems = new Map<DataKey, U>();\n\tprotected tableName: string;\n\n\tconstructor(protected browserDb: BrowserDbService, \n\t\tprivate _opQueue: OpQueueService) \n\t{ }\n\t\n\tprivate async _triggerLoadItems(): Promise<void> {\n\t\tif(this.items) {\n\t\t\treturn;\n\t\t};\n\t\tif(!this.browserDb.isOpen) {\n\t\t\tawait this.browserDb.openDb();\n\t\t}\n\t\tconst values = await this.browserDb.getAllValues(this.tableName);\n\t\tthis.items = values as T[];\n\t\tthis._sendNext();\n\t}\n\n\tsubscribe(\n\t\tobserverOrNext?: PartialObserver<U[]> | ((value: U[]) => void) | null,\n\t\terror?: ((error: any) => void) | null,\n\t\tcomplete?: (() => void) | null\n\t\t): Unsubscribable {\n\t\t\tlet unsub;\n\t\t\tif(typeof observerOrNext === 'function') {\n\t\t\t\tunsub = this.items$.subscribe(observerOrNext, error, complete);\n\t\t\t}\n\t\t\telse if(typeof observerOrNext === 'object') {\n\t\t\t\tunsub = this.items$.subscribe(observerOrNext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('Invalid argument.');\n\t\t\t}\n\t\t\tthis._opQueue.enqueueOp(() => this._triggerLoadItems());\n\t\t\treturn unsub;\n\t}\n\n\t/*subscribeStats cannot be combined with the base subscribe because\n\t\tthe base subscribe needs to be able to work with a list of items\n\t\tdue to requirements from the DataSource interface\n\t*/\n\tsubscribeStats(\n\t\tnext?: ((value: TableStats) => void) | null,\n\t\terror?: ((error: any) => void) | null,\n\t\tcomplete?: (() => void) | null\n\t): Unsubscribable {\n\t\tconst unsub = this.stats$.subscribe(next, error, complete);\n\t\tthis._opQueue.enqueueOp(() => this._triggerLoadItems());\n\t\treturn unsub;\n\t}\n\n\tprivate _sendNext() {\n\t\tconst fromIdx = this.currentPage * this.pageSize;\n\t\tconst usedItems = this.items.slice(fromIdx, fromIdx + this.pageSize);\n\t\tconst promises = usedItems.map((i) => this.transform(i));\n\t\tPromise.all(promises).then(transformed => {\n\t\t\tthis.items$.next(transformed);\n\t\t\tthis._sendNextStats();\n\t\t});\n\t}\n\n\tprivate _sendNextStats() {\n\t\tif(this.items) {\n\t\t\tthis.stats$.next({ \n\t\t\t\titemCount: this.items.length, \n\t\t\t\tloading: false });\n\t\t}\n\t}\n\n\treplaceAll(items: T[]): void {\n\t\tthis.items = items;\n\t\tthis._sendNext();\n\t}\n\n\tsaveItem(item: U): void {\n\t\tif(!this.items) {\n\t\t\tthis.items = [];\n\t\t}\n\t\tif(!item.id){\n\t\t\titem.id = v4();\n\t\t}\n\t\tconst saveble = this.transformInverse(item);\n\t\tthis.browserDb.putValue(this.tableName, saveble);\n\t\tthis.cachedItems.set(item.id, item);\n\t\tthis.items.push(saveble);\n\t\tthis.replaceAll(this.items);\n\t}\n\n\tremoveItem(item: T | U): void {\n\t\tif(!this.items || !item) return;\n\t\tthis.browserDb.deleteValue(this.tableName, item.id);\n\t\tthis.cachedItems.delete(item.id);\n\t\tthis.replaceAll(this.items.filter(i => i.id !== item.id));\n\t}\n\n\tasync getItemById(id: DataKey): Promise<U | null> {\n\t\tif(!id) return null;\n\t\tif(this.cachedItems.has(id)) {\n\t\t\tconst item = this.cachedItems.get(id);\n\t\t\treturn item;\n\t\t}\n\t\tconst item = await this.browserDb.getValue(this.tableName, id) as T;\n\t\tif(item) {\n\t\t\tconst transformed = await this.transform(item);\n\t\t\tthis.cachedItems.set(id, transformed);\n\t\t\treturn transformed;\n\t\t}\n\t\treturn null;\n\t}\n\n\tasObservable(): Observable<U[]> {\n\t\t//due to being async and js async event model. calling\n\t\t//_triggerLoadItems causes the emit action\n\t\t//to happen after this current callstack has finished\n\t\t//and so the table data gets loaded.\n\t\t//It's kinda a hack. \n\t\tthis._triggerLoadItems();\n\t\treturn from(this.items$);\n\t}\n\n\ttransform(t: T): U | Promise<U> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\ttransformInverse(u: U): T {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "browserDb",
                        "type": "BrowserDbService"
                    },
                    {
                        "name": "_opQueue",
                        "type": "OpQueueService"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "browserDb",
                        "type": "BrowserDbService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_opQueue",
                        "type": "OpQueueService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OpQueueService",
            "id": "injectable-OpQueueService-1b4dde55814ccacaca7cec41e5e54eec",
            "file": "src/app/services/op-queue/op-queue.service.ts",
            "properties": [
                {
                    "name": "_promiseTail",
                    "type": "Promise<unknown>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "enqueueOp",
                    "args": [
                        {
                            "name": "op",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "op",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OpQueueService {\n\tprivate _promiseTail: Promise<unknown>;\n\tconstructor() { }\n\t\n\tenqueueOp(op: () => Promise<unknown>): Promise<unknown> {\n\t\tconst promiseTail = new Promise<unknown>((resolve) => {\n\t\t\tif(!this._promiseTail) {\n\t\t\t\top().then((result) => {\n\t\t\t\t\tif(promiseTail === this._promiseTail) {\n\t\t\t\t\t\tthis._promiseTail = null;\n\t\t\t\t\t}\n\t\t\t\t\tresolve(result);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._promiseTail.then(() => {\n\t\t\t\t\top().then((result) => {\n\t\t\t\t\t\tif(promiseTail === this._promiseTail) {\n\t\t\t\t\t\t\tthis._promiseTail = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis._promiseTail = promiseTail;\n\t\treturn promiseTail;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "PersonsService",
            "id": "injectable-PersonsService-a67372bb6971c19bc60adc226bb0a387",
            "file": "src/app/services/persons/persons.service.ts",
            "properties": [
                {
                    "name": "tableName",
                    "defaultValue": "PEOPLE_TABLE_NAME",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cachedItems",
                    "defaultValue": "new Map<DataKey, U>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "items",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "items$",
                    "defaultValue": "new BehaviorSubject<U[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "pageSize",
                    "defaultValue": "25",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "sortFn",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "stats$",
                    "defaultValue": "new BehaviorSubject<TableStats>({\n\t\titemCount: 0,\n\t\tloading: true,\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "tableName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PersonDto>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformInverse",
                    "args": [
                        {
                            "name": "dto",
                            "type": "PersonDto"
                        }
                    ],
                    "optional": false,
                    "returnType": "Person",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "PersonDto",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_sendNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "_sendNextStats",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "_triggerLoadItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "asObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<U[]>",
                    "typeParameters": [],
                    "line": 144,
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "getItemById",
                    "args": [
                        {
                            "name": "id",
                            "type": "DataKey"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<U | null>",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "DataKey",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "T | U"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T | U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "replaceAll",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "saveItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "U"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<U[]> |  | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<U[]> |  | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "subscribeStats",
                    "args": [
                        {
                            "name": "next",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "t",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "U | Promise",
                    "typeParameters": [],
                    "line": 154,
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "transformInverse",
                    "args": [
                        {
                            "name": "u",
                            "type": "U"
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "u",
                            "type": "U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Person, PersonDto } from 'src/app/types/data-shape';\nimport { BrowserDbService, PEOPLE_TABLE_NAME } \n\tfrom '../browser-Db/browser-db.service';\nimport { ListService } from '../list/list.service';\nimport { OpQueueService } from '../op-queue/op-queue.service';\nimport { SchoolsService } from '../schools/schools.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersonsService extends ListService<Person, PersonDto>{\n\n\ttableName = PEOPLE_TABLE_NAME;\n\n\tconstructor(browserDb: BrowserDbService, \n\t\topQueue: OpQueueService,\n\t\tprivate schoolsService: SchoolsService) \n\t{ \n\t\tsuper(browserDb, opQueue);\n\t}\n\n\tasync transform(person: Person): Promise<PersonDto> {\n\t\tconst school = await this.schoolsService.getItemById(person.schoolId);\n\t\treturn {...person, school: school };\n\t}\n\n\ttransformInverse(dto: PersonDto): Person {\n\t\tconst { school, ...person} = dto;\n\t\t(person as Person).schoolId = school.id;\n\t\treturn person as Person;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "browserDb",
                        "type": "BrowserDbService"
                    },
                    {
                        "name": "opQueue",
                        "type": "OpQueueService"
                    },
                    {
                        "name": "schoolsService",
                        "type": "SchoolsService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "browserDb",
                        "type": "BrowserDbService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "opQueue",
                        "type": "OpQueueService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "schoolsService",
                        "type": "SchoolsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ListService",
            "type": "injectable"
        },
        {
            "name": "SchoolsService",
            "id": "injectable-SchoolsService-08824f06a1fc84b0e44956d90d9406b9",
            "file": "src/app/services/schools/schools.service.ts",
            "properties": [
                {
                    "name": "tableName",
                    "defaultValue": "SCHOOL_TABLE_NAME",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "cachedItems",
                    "defaultValue": "new Map<DataKey, U>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "items",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "items$",
                    "defaultValue": "new BehaviorSubject<U[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "pageSize",
                    "defaultValue": "25",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "sortFn",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "stats$",
                    "defaultValue": "new BehaviorSubject<TableStats>({\n\t\titemCount: 0,\n\t\tloading: true,\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "tableName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "school",
                            "type": "School"
                        }
                    ],
                    "optional": false,
                    "returnType": "School",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "school",
                            "type": "School",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformInverse",
                    "args": [
                        {
                            "name": "school",
                            "type": "School"
                        }
                    ],
                    "optional": false,
                    "returnType": "School",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "school",
                            "type": "School",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_sendNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "_sendNextStats",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "_triggerLoadItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "asObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<U[]>",
                    "typeParameters": [],
                    "line": 144,
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "getItemById",
                    "args": [
                        {
                            "name": "id",
                            "type": "DataKey"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<U | null>",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "DataKey",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "T | U"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T | U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "replaceAll",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "saveItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "U"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<U[]> |  | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "observerOrNext",
                            "type": "PartialObserver<U[]> |  | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "subscribeStats",
                    "args": [
                        {
                            "name": "next",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Unsubscribable",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "complete",
                            "type": " | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "t",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "U | Promise",
                    "typeParameters": [],
                    "line": 154,
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                },
                {
                    "name": "transformInverse",
                    "args": [
                        {
                            "name": "u",
                            "type": "U"
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "u",
                            "type": "U",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ListService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { School } from 'src/app/types/data-shape';\nimport { BrowserDbService, SCHOOL_TABLE_NAME } \n\tfrom '../browser-Db/browser-db.service';\nimport { ListService } from '../list/list.service';\nimport { OpQueueService } from '../op-queue/op-queue.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SchoolsService extends ListService<School> {\n\n\ttableName = SCHOOL_TABLE_NAME;\n\n\tconstructor(browserDb: BrowserDbService, opQueue: OpQueueService,) { \n\t\tsuper(browserDb, opQueue);\n\t}\n\n\ttransform(school: School): School {\n\t\treturn school;\n\t}\n\t\n\ttransformInverse(school: School): School {\n\t\treturn school;\n\t}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "browserDb",
                        "type": "BrowserDbService"
                    },
                    {
                        "name": "opQueue",
                        "type": "OpQueueService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "browserDb",
                        "type": "BrowserDbService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "opQueue",
                        "type": "OpQueueService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ListService",
            "type": "injectable"
        },
        {
            "name": "UserAuthService",
            "id": "injectable-UserAuthService-db25128ecdb6a29953a8338b14bd5a11",
            "file": "src/app/services/userAuth/user-auth.service.ts",
            "properties": [
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "canViewRoute",
                    "args": [
                        {
                            "name": "routeDef",
                            "type": "DanceSchedulerRoute"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeDef",
                            "type": "DanceSchedulerRoute",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DanceSchedulerRoute, ModeAccess, RoleAccess } from 'src/app/routeDefintions';\nimport { RoleType } from 'src/app/types/roles';\nimport { User } from 'src/app/types/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAuthService {\n\n\tuser: User;\n\n\tconstructor() { }\n\t\n\tpublic canViewRoute(routeDef: DanceSchedulerRoute): boolean {\n\t\tconst roleAll = routeDef.roleFilter === RoleAccess.All\n\t\tif(roleAll) {\n\t\t\treturn true;\n\t\t}\n\t\tif(this.user.roles.some(r => r.name === RoleType.Admin )) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t//#TODO: change to false\n\t\treturn true;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DanceAppDataSource",
            "id": "class-DanceAppDataSource-b2e1a32a31203234da4f8987759d2ff6",
            "file": "src/app/shared/utils/DanceAppDataSource.ts",
            "type": "class",
            "sourceCode": "import { DataSource } from '@angular/cdk/table';\nimport { Observable } from 'rxjs';\nimport { ListService } from 'src/app/services/list/list.service';\nimport { TableTypes } from 'src/app/types/data-shape';\nimport { IdSelectable } from 'src/app/types/id-selectable';\n\nexport class DanceAppDataSource<T extends TableTypes, U extends IdSelectable = T> \n\textends DataSource<U> \n{\n\n\tconstructor(private listService: ListService<T, U>)\n\t{\n\t\tsuper();\n\t}\n\n\tconnect(): Observable<U[] | readonly U[]> {\n\t\tconst ob = this.listService.asObservable();\n\t\treturn ob;\n\t}\n\n\tdisconnect(): void {\n\t}\n\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "listService",
                        "type": "ListService<T | U>"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "listService",
                        "type": "ListService<T | U>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "U",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<[] | readonly>",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-b2e1a32a31203234da4f8987759d2ff6",
                    "args": [],
                    "returnType": "void",
                    "line": 16
                }
            ],
            "extends": "DataSource",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AgeRangeValidatorDirective",
            "id": "directive-AgeRangeValidatorDirective-fc1f3f1392a7fcaecf4a8cebb44098ce",
            "file": "src/app/validators/age-range-validator.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { \nNG_VALIDATORS, \nValidationErrors, \nAbstractControl, \nValidator\n} \nfrom '@angular/forms';\nimport { stripDownObj } from '../shared/utils/objectHelpers';\n\n@Directive({\n\tselector: '[dsAgeRangeValidator]',\n\tproviders: [ { \n\t\tprovide: NG_VALIDATORS,\n\t\tuseExisting: AgeRangeValidatorDirective, \n\t\tmulti: true\n\t}]\n})\nexport class AgeRangeValidatorDirective implements Validator {\n\n\n\tvalidate(control: AbstractControl): ValidationErrors | null {\n\t\tconst fromAgeCtl = control.get('fromAge');\n\t\tif(!fromAgeCtl) return null;\n\t\tconst toAgeCtl = control.get('toAge');\n\t\tif(!toAgeCtl) return null;\n\t\tif(typeof toAgeCtl.value === 'string') {\n\t\t\tif(toAgeCtl.value.trim() === '+') return null;\n\t\t}\n\t\tconst fromAge: number = fromAgeCtl.value;\n\t\tconst toAge: number = parseInt(toAgeCtl.value);\n\t\tif(fromAge > toAge) {\n\t\t\tconst error = { invalidAgeRange: true };\n\t\t\tfromAgeCtl.setErrors(error);\n\t\t\ttoAgeCtl.setErrors(error);\n\t\t\treturn error;\n\t\t}\n\t\tconst fromErrs = stripDownObj(fromAgeCtl.errors,['invalidAgeRange']);\n\t\tfromAgeCtl.setErrors(fromErrs);\n\t\tconst toErrs = stripDownObj(toAgeCtl.errors,['invalidAgeRange']);\n\t\ttoAgeCtl.setErrors(toErrs);\n\t\treturn null;\n\n\t}\n\n}\n",
            "selector": "[dsAgeRangeValidator]",
            "providers": [
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: AgeRangeValidatorDirective, multi: true\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "Validator"
            ]
        }
    ],
    "components": [
        {
            "name": "AddCompModalComponent",
            "id": "component-AddCompModalComponent-4e686000c2a747b86f36aa2b53df1ae2",
            "file": "src/app/add-comp-modal/add-comp-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-comp-modal",
            "styleUrls": [
                "./add-comp-modal.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./add-comp-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "SocialEvent",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "DEFAULT_COMPETITION",
                    "defaultValue": "DEFAULT_COMPETITION",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddCompModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "EMPTY_COMPETITION",
                    "defaultValue": "EMPTY_COMPETITION",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "SocialEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "serviceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getEventName",
                    "args": [
                        {
                            "name": "event",
                            "type": "SocialEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "SocialEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Unsubscribable } from 'rxjs';\nimport { CompetitionSetupService } from '../services/competition-setup/competition-setup.service';\nimport { SocialEvent } from '../types/social-event';\nimport { DEFAULT_COMPETITION, EMPTY_COMPETITION } from '../types/constants';\n\n\n@Component({\n  selector: 'app-add-comp-modal',\n  templateUrl: './add-comp-modal.component.html',\n  styleUrls: ['./add-comp-modal.component.sass']\n})\nexport class AddCompModalComponent implements OnInit {\n\n\tloading = true;\n\toptions: SocialEvent[] = [];\n\tDEFAULT_COMPETITION = DEFAULT_COMPETITION;\n\tEMPTY_COMPETITION = EMPTY_COMPETITION;\n\tprivate serviceUnsub: Unsubscribable;\n\n\tconstructor(public dialogRef: MatDialogRef<AddCompModalComponent>,\n\t\t@Inject(MAT_DIALOG_DATA) public data: SocialEvent,\n\t\tprivate competitionService$: CompetitionSetupService) { }\n\n  ngOnInit(): void {\n\t\tthis.serviceUnsub = this.competitionService$\n\t\t\t.arraySubscribe((value: SocialEvent[]) => {\n\t\t\t\tthis.options = value;\n\t\t\t\tthis.loading = false;\n\t\t});\n\t}\n\n\tgetEventName(event: SocialEvent): string {\n\t\tif(!event) return 'Invalid';\n\t\tif(event.name) return event.name;\n\t\tif(event.eventDate || event.createDate) {\n\t\t\tconst d = event.eventDate || event.createDate;\n\t\t\tconst s = `comp${d.getFullYear()}${d.getMonth()}${d.getDate}_${d.getTime()}`;\n\t\t\treturn s;\n\t\t}\n\t\treturn 'Invalid';\n\t}\n\t\n\tonCancel(): void {\n\t\tthis.dialogRef.close();\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.serviceUnsub.unsubscribe();\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../styles'\n@use '../../modalStyles'\n",
                    "styleUrl": "./add-comp-modal.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddCompModalComponent>"
                    },
                    {
                        "name": "data",
                        "type": "SocialEvent"
                    },
                    {
                        "name": "competitionService$",
                        "type": "CompetitionSetupService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddCompModalComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "SocialEvent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "competitionService$",
                        "type": "CompetitionSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"loading\">\n\t<mat-spinner></mat-spinner>\n</div>\n<div *ngIf=\"!loading\">\n\t<h1>Copy Previous Competition?</h1>\n\t<div>\n\t\t<label for=\"compName\">Name:</label>\n\t\t<input \n\t\t\ttype=\"text\"\n\t\t\tname=\"compName\"\n\t\t\tplaceholder=\"Competition Name:\"\n\t\t\t[(ngModel)]=\"data.name\"\n\t\t/>\n\t</div>\n\t<div>\n\t\t<label for=\"competitionId\">Competition to copy:</label>\n\t\t<app-select\n\t\t\tname=\"competitionId\"\n\t\t\t[(ngModel)]=\"data.id\"\n\t\t>\n\t\t\tSelect Competition to copy...\n\t\t\t<app-select-option\n\t\t\t\t[value]=\"DEFAULT_COMPETITION\"\n\t\t\t>\n\t\t\t\tDefault\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\t[value]=\"EMPTY_COMPETITION\"\n\t\t\t>\n\t\t\t\tBlank Competition\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\t*ngFor=\"let competition of options\" \n\t\t\t\t[value]=\"competition.id\"\n\t\t\t>\n\t\t\t\t{{getEventName(competition)}}\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t<div>\n\t\t<mat-form-field>\n\t\t\t<mat-label>Date of competition?</mat-label>\n\t\t\t<input matInput \n\t\t\t\t[matDatepicker]=\"picker\" \n\t\t\t/>\n\t\t\t<mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n\t\t\t<mat-datepicker touchUi #picker></mat-datepicker>\n\t\t</mat-form-field>\n\t</div>\n\t<div>\n\t\t<button class=\"add-btn\" (click)=\"onCancel()\">Cancel</button>\n\t\t<button class=\"add-btn\" [mat-dialog-close]=\"data\">Add Person</button>\n\t</div>\n</div>"
        },
        {
            "name": "AgeGroupFormComponent",
            "id": "component-AgeGroupFormComponent-f1582f59f6a5c14cb1be40cef086b738",
            "file": "src/app/comp-rules-setup/age-group-form/age-group-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "age-group-form",
            "styleUrls": [
                "./age-group-form.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./age-group-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ageGroupChoice",
                    "defaultValue": "CompKeys.ageGroups",
                    "line": 19,
                    "type": "AgeGroupChoice"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ageGroupFormGroup",
                    "defaultValue": "new FormGroup({\n\t\tname: this.name,\n\t\tfromAge: this.fromAge,\n\t\ttoAge: this.toAge,\n\t})",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "ageGroups",
                    "type": "AgeGroupType[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "compSetupServiceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "direction",
                    "defaultValue": "Direction",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "firstInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'firstInput'"
                        }
                    ]
                },
                {
                    "name": "fromAge",
                    "defaultValue": "new FormControl('',[Validators.min(0)])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "defaultValue": "new FormControl('')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "prevToAge",
                    "type": "number | plus | \"\"",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "submitValidators",
                    "type": "Validator[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "toAge",
                    "defaultValue": "new FormControl('')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "toAgeSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onRowRemoveClick",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "reorderClick",
                    "args": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<AgeGroupType>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<AgeGroupType>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toAgeOnChange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unboundedAgeClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild, ElementRef, Input } from '@angular/core';\nimport { FormGroup, Validator, FormControl, Validators } from '@angular/forms';\nimport { Subscription, Unsubscribable } from 'rxjs';\nimport { \n\tAgeRangeValidatorDirective \n} from '../../validators/age-range-validator.directive';\nimport { Direction, DirectionEventArg } from '../../types/directions';\nimport { CompetitionSetupService, CompKeys } from 'src/app/services/competition-setup/competition-setup.service';\nimport { AgeGroupType, Competition, plus } from 'src/app/types/data-shape';\n\nexport type AgeGroupChoice = CompKeys.ageGroups | CompKeys.multiEventAgeGroups;\n\n@Component({\n  selector: 'age-group-form',\n  templateUrl: './age-group-form.component.html',\n\tstyleUrls: ['./age-group-form.component.sass']\n})\nexport class AgeGroupFormComponent implements OnInit, OnDestroy {\n\t@Input('ageGroupChoice') ageGroupChoice: AgeGroupChoice = CompKeys.ageGroups;\n\tname = new FormControl('');\n\tfromAge = new FormControl('',[Validators.min(0)]);\n\ttoAge = new FormControl('');\n\tageGroupFormGroup = new FormGroup({\n\t\tname: this.name,\n\t\tfromAge: this.fromAge,\n\t\ttoAge: this.toAge,\n\t});\n\tcompSetupServiceUnsub: Unsubscribable;\n\tageGroups: AgeGroupType[];\n\tsubmitValidators: Validator[];\n\ttoAgeSubscription: Subscription;\n\tdirection = Direction;\n\t\n\tprevToAge: number | plus | '';\n\n\t@ViewChild('firstInput') firstInput: ElementRef;\n\n  constructor( private competitionSetup$: CompetitionSetupService) { \n\t\tthis.ageGroups = [];\n\t\tthis.submitValidators = [new AgeRangeValidatorDirective()];\n\t\tthis.toAgeSubscription = \n\t\t\tthis.toAge.valueChanges.subscribe(this.toAgeOnChange.bind(this));\n\t}\n\n  ngOnInit(): void {\n\t\tthis.compSetupServiceUnsub = this.competitionSetup$\n\t\t.subscribe((value: Competition) => {\n\t\t\t\tthis.ageGroups = value[this.ageGroupChoice];\n\t\t\t}\n\t\t);\n\t}\n\t\n\ttoAgeOnChange(newValue: string): void {\n\t\tif(!this) return;\n\t\tconst allowedInputs = /(^[1-9]\\d*$)|(^\\+$)|(^0$)/;\n\t\t//if input is valid, we update model \n\t\t//else we revert the control\n\t\tif(allowedInputs.test(newValue)) {\n\t\t\tif(newValue === '+') {\n\t\t\t\tthis.prevToAge = newValue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.prevToAge = parseInt(newValue);\n\t\t\t}\n\t\t}\n\t\telse if(!newValue) {\n\t\t\tthis.prevToAge = '';\n\t\t}\n\t\telse {\n\t\t\tthis.toAge.setValue(this.prevToAge, {'emitEvent': false});\n\t\t}\n\t\t\n\t}\n\n\tunboundedAgeClick(): void {\n\t\t this.prevToAge = '+';\n\t\t this.toAge.setValue(this.prevToAge, {'emitEvent': false});\n\t}\n\n\treorderClick(eventArg: DirectionEventArg<AgeGroupType>): void {\n\t\tthis.competitionSetup$.moveItem(eventArg.item, eventArg.direction, \n\t\t\tthis.ageGroupChoice);\n\t}\n\n\tonSubmit(): void {\n\t\tconst submitErrors = this.submitValidators.reduce((p, c) => {\n\t\t\tconst addErrors = c.validate(this.ageGroupFormGroup);\n\t\t\treturn addErrors ? { ...p, ...addErrors } : p;\n\t\t},null);\n\t\tconst existingErrors = this.ageGroupFormGroup.errors;\n\t\tif(submitErrors || existingErrors) {\n\t\t\tthis.ageGroupFormGroup.setErrors({...existingErrors, ...submitErrors});\n\t\t}\n\t\tif(!this.ageGroupFormGroup.valid){\n\t\t\tthis.ageGroupFormGroup.markAllAsTouched();\n\t\t}\n\t\telse {\n\t\t\tconst toAge = this.ageGroupFormGroup.value.toAge;\n\t\t\tthis.competitionSetup$.saveItem({\n\t\t\t\t...this.ageGroupFormGroup.value, \n\t\t\t\ttoAge: toAge === '+' ? '+' : parseInt(toAge)\n\t\t\t}, this.ageGroupChoice);\n\t\t\tthis.ageGroupFormGroup.reset({}, {emitEvent: false});\n\t\t}\n\t}\n\n\tonRowRemoveClick(item) {\n\t\tthis.competitionSetup$\n\t\t\t.removeItems(i => i.id !== item.id, this.ageGroupChoice);\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.toAgeSubscription.unsubscribe();\n\t\tthis.compSetupServiceUnsub.unsubscribe();\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../styles'\n@use '../comp-rules-setup.component' as pageParent\n\n$cell-right-padding: 0\n\n\n\ntd:not(:nth-last-child(2))\n\twidth: 90px\n\ntd:first-child\n\twidth: unset\n\ntd:nth-child(n + 2), th:nth-child(n + 2)\n\tpadding-left: pageParent.$cell-left-padding\n\n\ntd:nth-last-child(2)\n\tinput\n\t\tborder-top-right-radius: 2 * styles.$rounding-standard\n\t\tborder-bottom-right-radius: 2 * styles.$rounding-standard\n\n.to-age-cell\n\tposition: relative\n\n\n.to-age-btn\n\tbackground-color: styles.$bg-color-menu1\n\tcolor: styles.$fg-color-menu-text\n\tposition: absolute\n\tright: styles.$input-border-width\n\ttop: styles.$input-border-width\n\theight: pageParent.$input-height - 2 * styles.$input-border-width\n\tpadding: 0 .25em\n\t//border-top-right-radius: styles.$rounding-standard\n\t//border-bottom-right-radius: styles.$rounding-standard\n\tborder-top-left-radius: styles.$rounding-standard\n\tborder-bottom-left-radius: styles.$rounding-standard\n\t@extend %btn-common\n\n\n",
                    "styleUrl": "./age-group-form.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form \n\t[formGroup]=\"ageGroupFormGroup\"\n\t(ngSubmit)=\"onSubmit()\" \n\tautocomplete=\"off\"\n>\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th></th>\n\t\t\t\t<th>Group</th>\n\t\t\t\t<th>From..</th>\n\t\t\t\t<th>To Years Old</th>\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr *ngFor=\"let ageGroup of ageGroups\">\n\t\t\t\t<td>\n\t\t\t\t\t<ds-up-down (reorderClick)=\"reorderClick($event)\" \n\t\t\t\t\t\t[associatedItem]=\"ageGroup\"\n\t\t\t\t\t\t[size]=\"ageGroups.length\"\n\t\t\t\t\t>\n\t\t\t\t\t</ds-up-down>\n\t\t\t\t</td>\n\t\t\t\t<td>{{ageGroup.name}}</td>\n\t\t\t\t<td>{{ageGroup.fromAge}}</td>\n\t\t\t\t<td>{{ageGroup.toAge}}</td>\n\t\t\t\t<td><button (click)=\"onRowRemoveClick(ageGroup)\" type=\"button\" class=\"add-row-btn\">-</button></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot>\n\t\t\t<tr>\n\t\t\t\t<td></td>\n\t\t\t\t<td>\n\t\t\t\t\t<label for=\"gname\">Group</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\tformControlName=\"name\" \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tclass=\"age-group-width\"\n\t\t\t\t\t\t#firstInput\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<div \n\t\t\t\t\t\t*ngIf=\"name.errors?.required && !(name.valid || name.untouched)\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>Group is required\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<label for=\"fromAge\">From..</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\tformControlName=\"fromAge\" \n\t\t\t\t\t\ttype=\"number\" \n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\tplaceholder=\"0\"\n\t\t\t\t\t\tclass=\"age-group-width\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t>\n\t\t\t\t\t<div *ngIf=\"!(fromAge.valid || fromAge.untouched)\">\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\t*ngIf=\"fromAge.errors?.required\" \n\t\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t\t>From age is required\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t*ngIf=\"fromAge.errors?.min\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t\t>Minimum value is 0\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td class=\"to-age-cell\">\n\t\t\t\t\t<label for=\"toAge\">To Years Old</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\tplaceholder=\"0\"\n\t\t\t\t\t\tformControlName=\"toAge\" \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\trequired>\n\t\t\t\t\t<button \n\t\t\t\t\t\tclass=\"to-age-btn\" \n\t\t\t\t\t\t(click)=\"unboundedAgeClick()\" \n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t>\n\t\t\t\t\t\tNo Age Limit\n\t\t\t\t\t</button>\n\t\t\t\t\t<div \n\t\t\t\t\t\t*ngIf=\"toAge.errors?.required && !(toAge.valid || toAge.untouched)\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>To age is required\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"ageGroupFormGroup.errors?.invalidAgeRange && ageGroupFormGroup.touched\"\n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>\n\t\t\t\t\t\tImpossible age range\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<button class=\"add-row-btn\">+</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n</form>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-137150fb882a7d0c285f2cb7f2b234ed",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentDivStyle",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isSmallScreen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "routeDescriptions",
                    "defaultValue": "allRoutes",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "screenWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "shouldSmScreenHideMenu",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "defaultValue": "'Dance Scheduler'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getOutsideWidth",
                    "args": [
                        {
                            "name": "el",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideOrShowForScreenSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "menuOpenClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "line": 49
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostListener } from '@angular/core';\nimport { allRoutes } from './routeDefintions';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n\n\tscreenWidth: number;\n\tisSmallScreen: boolean;\n\tshouldSmScreenHideMenu: boolean;\n\tcontentDivStyle: {};\n\n\ttitle = 'Dance Scheduler';\n\trouteDescriptions = allRoutes;\n\t\n\tngOnInit(): void {\n\t\tthis.getScreenSize();\n\t}\n\n\thideOrShowForScreenSize() : void {\n\t\tconst wasSmallScreen = this.isSmallScreen;\n\t\tthis.isSmallScreen = this.screenWidth <= 640;\n\t\tif(!this.isSmallScreen) { //wasSmallScreen is irrelevant\n\t\t\tthis.shouldSmScreenHideMenu = false;\n\t\t}\n\t\telse if(this.isSmallScreen && !wasSmallScreen) {\n\t\t\tthis.shouldSmScreenHideMenu = true;\n\t\t}\n\t\t//implied else if this.isSmallScreen && wasSmallScreen\n\t\t//-> leave shouldSmScreenHideMenu to whatever it is\n\t\t\n\t}\n\n\tgetOutsideWidth(el: HTMLElement) {\n\t\tconst styleObj = window.getComputedStyle(el);\n\t\tlet widthSum = parseFloat(styleObj.paddingLeft);\n\t\twidthSum += parseFloat(styleObj.paddingRight);\n\t\twidthSum += parseFloat(styleObj.marginLeft);\n\t\twidthSum += parseFloat(styleObj.marginRight);\n\t\twidthSum += parseFloat(styleObj.borderLeftWidth);\n\t\twidthSum += parseFloat(styleObj.borderRightWidth);\n\t\treturn widthSum;\n\t}\n\t\n\t@HostListener('window:resize')\n\tgetScreenSize() : void {\n\t\tthis.screenWidth = window.innerWidth;\n\t\tthis.hideOrShowForScreenSize();\n\t}\n\n\tmenuOpenClick() : void {\n\t\tthis.shouldSmScreenHideMenu = !this.shouldSmScreenHideMenu;\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../styles'\n\n$width-menu-base: 200px\n$top-bar-height: 2em\n\n\n.navigation-base\n\tdisplay: grid\n\tgrid-template-rows: [top] $top-bar-height [body] auto\n\tgrid-template-columns: [menu] $width-menu-base [body] auto\n\twidth: 100%\n\tmin-height: styles.$min-height\n\t@extend .bg-gradient\n\n.menu-container\n\tgrid-row-start: body\n\tgrid-row-end: -1\n\tgrid-column-start: menu\n\tgrid-column-end: body\n\n.content-base\n\tgrid-row-start: body\n\tgrid-row-end: -1\n\tgrid-column-start: body\n\tbackground-color: styles.$bg-color-content\n\tborder-radius: styles.$rounding-standard\n\tpadding: 1em\n\n\ta\n\t\tcolor: styles.$fg-color-menu-text\n\n\t\t&:visited\n\t\t\tcolor: styles.$fg-color-menu-text\n\n.icon-coords\n\tgrid-row-start: top\n\tgrid-row-end: body\n\t\n@media(max-width: styles.$breakpoint-small)\n\n\t.menu-container\n\t\theight: 100%\n\t\tposition: sticky\n\t\tz-index: 2\n\t\tbackground: styles.$gradient-radial-bg\n\t\ttop: styles.$top-bar-height\n\t\tbox-shadow: 7px 1px 5px -4px rgb(0, 0, 0, .3)\n\n\t.content-base\n\t\tgrid-column-start: menu\n\t\tgrid-column-end: -1\n\t\tgrid-row-start: body\n\t\tgrid-row-end: -1\n\t\theight: 100%\n\n\t.icon-coords\n\t\tposition: fixed\n\t\tbackground: styles.$gradient-linear-bg\n\t\twidth: 100%\n\t\theight: $top-bar-height\n\n.open-menu-icon\n\t@extend %icon-base\n\tbackground: inherit\n\tcolor: styles.$fg-color-icon1\n\n\n\n",
                    "styleUrl": "./app.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"navigation-base\">\n\t<div class=\"height-icon icon-coords\">\n\t\t<button *ngIf=\"isSmallScreen\" \n\t\t\tclass=\"open-menu-icon\" \n\t\t\ttype=\"button\" \n\t\t\t(click)=\"menuOpenClick()\"\n\t\t>\n\t\t\t<svg class=\"open-menu-icon\" viewBox=\"0 0 24 24\">\n\t\t\t\t<path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/>\n\t\t\t</svg>\n\t\t</button>\n\t</div>\n\t<div class=\"menu-container\" *ngIf=\"!shouldSmScreenHideMenu\" >\n\t\t<app-menu \n\t\t\t[routeDescriptions]=\"routeDescriptions\"\n\t\t\t[styleOverrides]=\"isSmallScreen ? { position: 'fixed' } : {}\"\n\t\t\t></app-menu>\n\t</div>\n\t<div id=\"content-base\" class=\"content-base\" [style]=\"contentDivStyle\" >\n\t\t<router-outlet></router-outlet>\n\t</div>\n\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-ae612092c83e8e8852cbcb8aa37e4122",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ words }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "miText",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ words }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input('miText')\n  words = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CallCounterComponent",
            "id": "component-CallCounterComponent-19b1251c71544928a56c0202d8d10095",
            "file": "src/stories/callCounter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "callCounter",
            "styleUrls": [],
            "styles": [
                "\n      h1 {\n        font-family: Lato;\n\t\t\t}\n\t\t\tbutton {\n\t\t\t\tmargin: 5px;\n\t\t\t}\n      .brick {\n        width: 100px;\n        height: 100px;\n\t\t\t}\n\t\t\t.volcano:after {\n\t\t\t\tcontent: 'hiya';\n\t\t\t\tcolor: #000;\n\t\t\t}\n      #top {\n        background-color: #1ecbe1;\n      }\n      #tow {\n        background-color: #e1341e;\n      }\n      .brick:focus {\n        border-width: 1px;\n        border-style: solid;\n        border-color: black;\n      }\n    "
            ],
            "template": "{{ping()}}\n  <div id=\"top\" class=\"brick {{klass}}\" #topOne tabIndex=\"-1\"></div>\n  <div id=\"tow\" class=\"brick {{klass}}\" #twoOne tabIndex=\"-1\"></div>\n  <div>\n    <button (click)=\"topOnClick()\">Top</button>\n\t<button (click)=\"twoOnClick()\">Two</button>\n\t<button (click)=\"switchClass()\">Switch klass</button>\n  </div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "line": 46,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "klass",
                    "defaultValue": "\"brick\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "topOne",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'topOne'"
                        }
                    ]
                },
                {
                    "name": "twoOne",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'twoOne'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ping",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "switchClass",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "topOnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "twoOnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from \"@angular/core\";\n\n@Component({\n  selector: \"callCounter\",\n\ttemplate: `\n\t\t{{ping()}}\n    <div id=\"top\" class=\"brick {{klass}}\" #topOne tabIndex=\"-1\"></div>\n    <div id=\"tow\" class=\"brick {{klass}}\" #twoOne tabIndex=\"-1\"></div>\n    <div>\n      <button (click)=\"topOnClick()\">Top</button>\n\t\t\t<button (click)=\"twoOnClick()\">Two</button>\n\t\t\t<button (click)=\"switchClass()\">Switch klass</button>\n    </div>\n  `,\n  styles: [\n    `\n      h1 {\n        font-family: Lato;\n\t\t\t}\n\t\t\tbutton {\n\t\t\t\tmargin: 5px;\n\t\t\t}\n      .brick {\n        width: 100px;\n        height: 100px;\n\t\t\t}\n\t\t\t.volcano:after {\n\t\t\t\tcontent: 'hiya';\n\t\t\t\tcolor: #000;\n\t\t\t}\n      #top {\n        background-color: #1ecbe1;\n      }\n      #tow {\n        background-color: #e1341e;\n      }\n      .brick:focus {\n        border-width: 1px;\n        border-style: solid;\n        border-color: black;\n      }\n    `\n  ]\n})\nexport class CallCounterComponent {\n  @Input() name: string;\n  @ViewChild(\"topOne\") topOne: ElementRef;\n  @ViewChild(\"twoOne\") twoOne: ElementRef;\n\tklass = \"brick\";\n\n  topOnClick() {\n    console.log(\"top\");\n    this.topOne.nativeElement.focus();\n  }\n\n  twoOnClick() {\n    console.log(\"two\");\n    this.twoOne.nativeElement.focus();\n\t}\n\n\tswitchClass() {\n\t\tif(this.klass === 'volcano') {\n\t\t\tthis.klass = undefined;\n\t\t}\n\t\telse {\n\t\t\tthis.klass = 'volcano';\n\t\t}\n\t}\n\t\n\tping() {\n\t\tconsole.log('ping');\n\t}\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      h1 {\n        font-family: Lato;\n\t\t\t}\n\t\t\tbutton {\n\t\t\t\tmargin: 5px;\n\t\t\t}\n      .brick {\n        width: 100px;\n        height: 100px;\n\t\t\t}\n\t\t\t.volcano:after {\n\t\t\t\tcontent: 'hiya';\n\t\t\t\tcolor: #000;\n\t\t\t}\n      #top {\n        background-color: #1ecbe1;\n      }\n      #tow {\n        background-color: #e1341e;\n      }\n      .brick:focus {\n        border-width: 1px;\n        border-style: solid;\n        border-color: black;\n      }\n    \n"
        },
        {
            "name": "CategoryFormComponent",
            "id": "component-CategoryFormComponent-7f37f4626330391229786d5705e1930b",
            "file": "src/app/comp-rules-setup/category-form/category-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "category-form",
            "styleUrls": [
                "./category-form.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./category-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "compSetupServiceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dances",
                    "type": "Dance[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "firstInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'firstInput'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onRowRemoveClick",
                    "args": [
                        {
                            "name": "category",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reorderClick",
                    "args": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<Category>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<Category>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Unsubscribable } from 'rxjs';\nimport { CompetitionSetupService, CompKeys } \n\tfrom 'src/app/services/competition-setup/competition-setup.service';\nimport { Category, Competition, Dance } from 'src/app/types/data-shape';\nimport { DirectionEventArg } from '../../types/directions';\n\n\n@Component({\n  selector: 'category-form',\n  templateUrl: './category-form.component.html',\n  styleUrls: ['./category-form.component.sass']\n})\nexport class CategoryFormComponent implements OnInit {\n\n\tcompSetupServiceUnsub: Unsubscribable;\n\tcategories: Category[];\n\tdances: Dance[];\n\n\t@ViewChild('firstInput') firstInput: ElementRef;\n\t\n\n  constructor(private competitionSetup$: CompetitionSetupService) { \n\t\tthis.categories = [];\n\t}\n\n  ngOnInit(): void {\n\t\tthis.compSetupServiceUnsub = this.competitionSetup$.subscribe(\n\t\t\t(value: Competition) => {\n\t\t\t\tthis.categories = value.categories;\n\t\t\t\tthis.dances = value.dances;\n\t\t\t}\n\t\t);\n\t}\n\n\treorderClick(eventArg: DirectionEventArg<Category>): void {\n\t\tthis.competitionSetup$\n\t\t\t.moveItem(eventArg.item, eventArg.direction, CompKeys.categories);\n\t}\n\n\tonSubmit(formGroup: FormGroup): void {\n\t\tif(!formGroup.valid){\n\t\t\tformGroup.markAllAsTouched();\n\t\t}\n\t\telse {\n\t\t\tthis.competitionSetup$.saveItem({\n\t\t\t\t...formGroup.value\n\t\t\t}, CompKeys.categories);\n\t\t\tformGroup.reset({}, {emitEvent: false});\n\t\t}\n\t}\n\n\tonRowRemoveClick(category) {\n\t\tconst hasDependants = this.dances\n\t \t\t.some(d => d.categoryId === category.id);\n\t \tif(hasDependants) {\n\t\t\tconst problemDances = this.dances\n\t\t\t\t.filter(d => d.categoryId === category.id)\n\t\t\t\t.map(d => d.name);\n\t\t\tconst problemDancesStr = problemDances.join(',');\n\t\t\tconst mainMsg = 'Category could not be removed because ' +\n\t\t\t\t'the following dances are part of it:';\n\t\t\talert(`${mainMsg} ${problemDancesStr}`);\n\t\t\treturn;\n\t\t}\n\t\tthis.competitionSetup$\n\t\t\t\t.removeItems(i => i.id !== category.id, CompKeys.categories);\n\t\t\t\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.compSetupServiceUnsub.unsubscribe();\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../styles'\n@use '../comp-rules-setup.component' as pageParent\n\ntd:nth-child(2)\n\twidth: 90px\n\ntd, th\n\tpadding-left: pageParent.$cell-left-padding",
                    "styleUrl": "./category-form.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form \n\t#categoryForm=\"ngForm\" \n\t(ngSubmit)=\"onSubmit(categoryForm.form)\" \n\tdsAgeRangeValidator\n\tautocomplete=\"off\"\n>\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th></th>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr *ngFor=\"let catagory of categories\">\n\t\t\t\t<td>\n\t\t\t\t\t<ds-up-down (reorderClick)=\"reorderClick($event)\" \n\t\t\t\t\t\t[associatedItem]=\"catagory\"\n\t\t\t\t\t\t[size]=\"categories.length\"\n\t\t\t\t\t>\n\t\t\t\t\t</ds-up-down>\n\t\t\t\t</td>\n\t\t\t\t<td>{{catagory.name}}</td>\n\t\t\t\t<td><button (click)=\"onRowRemoveClick(catagory)\" \n\t\t\t\t\ttype=\"button\" \n\t\t\t\t\tclass=\"add-row-btn\">-</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot>\n\t\t\t<tr>\n\t\t\t\t<td></td>\n\t\t\t\t<td>\n\t\t\t\t\t<label for=\"name\">Name</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\tname=\"name\" \n\t\t\t\t\t\tngModel \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tclass=\"age-group-width\"\n\t\t\t\t\t\t#name=\"ngModel\"\n\t\t\t\t\t\t#firstInput\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<div \n\t\t\t\t\t\t*ngIf=\"!(name.valid || name.untouched)\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>\n\t\t\t\t\t\tName is required\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<button class=\"add-row-btn\">+</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n</form>"
        },
        {
            "name": "CompRulesSetupComponent",
            "id": "component-CompRulesSetupComponent-950999483df5a4037486cd2974f86aba",
            "file": "src/app/comp-rules-setup/comp-rules-setup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comp-rules-setup",
            "styleUrls": [
                "./comp-rules-setup.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./comp-rules-setup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showAgeGroups",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "showDanceCategories",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showDances",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showMultiEventAgeGroups",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showMultiEventDances",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showMultiEventSkillLevels",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showSkillLvls",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-comp-rules-setup',\n  templateUrl: './comp-rules-setup.component.html',\n  styleUrls: ['./comp-rules-setup.component.sass']\n})\nexport class CompRulesSetupComponent implements OnInit {\n\n\tshowAgeGroups: boolean;\n\tshowDanceCategories: boolean;\n\tshowDances: boolean;\n\tshowSkillLvls: boolean;\n\tshowMultiEventAgeGroups: boolean;\n\tshowMultiEventSkillLevels: boolean;\n\tshowMultiEventDances: boolean;\n\n\tngOnInit(): void {\n\t}\n\t\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../styles'\n\n$input-height: 1.5em - styles.$input-border-width\n\n$cell-left-padding: .25em\n$cell-bottom-padding: .5em\n\nh3\n\n\tspan\n\t\t&:hover\n\t\t\tcursor: pointer\n\n\t>span:nth-child(2)\n\t\tfont-size: 1.7em\n\t\tmargin-left: 3em\n\t\t&:hover\n\t\t\ttext-shadow: 5px 5px 10px #000\n\t\t\t\n\ntable\n\tborder-collapse: collapse\n\ntd\n\tpadding-bottom: $cell-bottom-padding\n\tfont-size: styles.$data-font-size\n\tvertical-align: text-top\n\nth\n\ttext-align: left\n\tpadding-bottom: $cell-bottom-padding\n\ntfoot\n\ttr\n\t\theight: 2.5em\n\t\tvertical-align: top\n\n\tinput\n\t\twidth: inherit\n\t\tvertical-align: top\n\n\tbutton\n\t\tvertical-align: top\n\n\tlabel\n\t\tposition: absolute\n\t\tvisibility: hidden\n\n.order-btn\n\tbackground-color: styles.$bg-color-content\n\tcolor: styles.$border-color-input\n\tdisplay: block\n\twidth: 1em\n\theight: 1em\n\n.add-row-btn\n\tbackground-color: styles.$bg-color-menu1\n\tcolor: styles.$fg-color-menu-text\n\tborder-radius: styles.$rounding-standard,\n\theight: $input-height\n\twidth: $input-height\n\t@extend %btn-common\n\n\n",
                    "styleUrl": "./comp-rules-setup.component.sass"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Setup competition Variations</h1>\n<h3>\n\t<span (click)=\"showAgeGroups = !showAgeGroups\">\n\t\tAge Groups:\n\t\t<ds-hide-icon \n\t\t\t[hidden]=\"showAgeGroups\" \n\t\t\tstrokeColor=\"black\" \n\t\t\twidth=\".8em\" \n\t\t\theight=\".8em\"\n\t\t>\n\t\t</ds-hide-icon>\n\t\t<ds-expand-icon \n\t\t\t[hidden]=\"!showAgeGroups\" \n\t\t\tstrokeColor=\"black\" \n\t\t\twidth=\".8em\" \n\t\t\theight=\".8em\"\n\t\t>\n\t\t</ds-expand-icon>\n\t</span>\n</h3>\n\n<div [hidden]=\"showAgeGroups\" class=\"section\">\n\t<age-group-form></age-group-form>\n</div>\n<div>\n\t<h3>\n\t\t<span (click)=\"showDanceCategories = !showDanceCategories\">\n\t\t\tDance Categories:\n\t\t\t<ds-hide-icon \n\t\t\t\t[hidden]=\"showDanceCategories\" \n\t\t\t\tstrokeColor=\"black\" \n\t\t\t\twidth=\".8em\" \n\t\t\t\theight=\".8em\"\n\t\t\t>\n\t\t\t</ds-hide-icon>\n\t\t\t<ds-expand-icon \n\t\t\t\t[hidden]=\"!showDanceCategories\" \n\t\t\t\tstrokeColor=\"black\" \n\t\t\t\twidth=\".8em\" \n\t\t\t\theight=\".8em\"\n\t\t\t>\n\t\t\t</ds-expand-icon>\n\t\t</span>\n\t</h3>\n\t<div [hidden]=\"showDanceCategories\" class=\"section\">\n\t\t<category-form></category-form>\n\t</div>\n</div>\n<div>\n\t<h3>\n\t\t<span (click)=\"showDances = !showDances\">\n\t\t\tDances:\n\t\t\t<ds-hide-icon \n\t\t\t\t[hidden]=\"showDances\" \n\t\t\t\tstrokeColor=\"black\" \n\t\t\t\twidth=\".8em\" \n\t\t\t\theight=\".8em\"\n\t\t\t>\n\t\t\t</ds-hide-icon>\n\t\t\t<ds-expand-icon \n\t\t\t\t[hidden]=\"!showDances\" \n\t\t\t\tstrokeColor=\"black\" \n\t\t\t\twidth=\".8em\" \n\t\t\t\theight=\".8em\"\n\t\t\t>\n\t\t\t</ds-expand-icon>\n\t\t</span>\n\t</h3>\n\t<div [hidden]=\"showDances\" class=\"section\">\n\t\t<dance-form></dance-form>\n\t</div>\n</div>\n<div>\n\t<h3>\n\t\t<span (click)=\"showSkillLvls = !showSkillLvls\">\n\t\t\tSkill Levels:\n\t\t\t<ds-hide-icon \n\t\t\t\t[hidden]=\"showSkillLvls\" \n\t\t\t\tstrokeColor=\"black\" \n\t\t\t\twidth=\".8em\" \n\t\t\t\theight=\".8em\"\n\t\t\t>\n\t\t\t</ds-hide-icon>\n\t\t\t<ds-expand-icon \n\t\t\t\t[hidden]=\"!showSkillLvls\" \n\t\t\t\tstrokeColor=\"black\" \n\t\t\t\twidth=\".8em\" \n\t\t\t\theight=\".8em\"\n\t\t\t>\n\t\t\t</ds-expand-icon>\n\t\t</span>\n\t</h3>\n\t<div [hidden]=\"showSkillLvls\" class=\"section\">\n\t\t<app-skill-level-form></app-skill-level-form>\n\t</div>\n</div>\n<div>\n\t<h2>Multi Event Setup:</h2>\n\t<div>\n\t\t<h3>\n\t\t\t<span (click)=\"showMultiEventAgeGroups = !showMultiEventAgeGroups\">\n\t\t\t\tAge Groups:\n\t\t\t\t<ds-hide-icon \n\t\t\t\t\t[hidden]=\"showMultiEventAgeGroups\" \n\t\t\t\t\tstrokeColor=\"black\" \n\t\t\t\t\twidth=\".8em\" \n\t\t\t\t\theight=\".8em\"\n\t\t\t\t>\n\t\t\t\t</ds-hide-icon>\n\t\t\t\t<ds-expand-icon \n\t\t\t\t\t[hidden]=\"!showMultiEventAgeGroups\" \n\t\t\t\t\tstrokeColor=\"black\" \n\t\t\t\t\twidth=\".8em\" \n\t\t\t\t\theight=\".8em\"\n\t\t\t\t>\n\t\t\t\t</ds-expand-icon>\n\t\t\t</span>\n\t\t</h3>\n\t\t<div [hidden]=\"showMultiEventAgeGroups\" class=\"section\">\n\t\t\t<age-group-form ageGroupChoice=\"multiEventAgeGroups\">\n\t\t\t</age-group-form>\n\t\t</div>\n\t</div>\n\t<div>\n\t\t<h3>\n\t\t\t<span (click)=\"showMultiEventSkillLevels = !showMultiEventSkillLevels\">\n\t\t\t\tSkill Levels:\n\t\t\t\t<ds-hide-icon \n\t\t\t\t\t[hidden]=\"showMultiEventSkillLevels\" \n\t\t\t\t\tstrokeColor=\"black\" \n\t\t\t\t\twidth=\".8em\" \n\t\t\t\t\theight=\".8em\"\n\t\t\t\t>\n\t\t\t\t</ds-hide-icon>\n\t\t\t\t<ds-expand-icon \n\t\t\t\t\t[hidden]=\"!showMultiEventSkillLevels\" \n\t\t\t\t\tstrokeColor=\"black\" \n\t\t\t\t\twidth=\".8em\" \n\t\t\t\t\theight=\".8em\"\n\t\t\t\t>\n\t\t\t\t</ds-expand-icon>\n\t\t\t</span>\n\t\t</h3>\n\t\t<div [hidden]=\"showMultiEventSkillLevels\" class=\"section\">\n\t\t\t<app-skill-level-form skillLevelsChoice=\"multiEventSkillLevels\">\n\t\t\t</app-skill-level-form>\n\t\t</div>\n\t</div>\n\t<div>\n\t\t<h3>\n\t\t\t<span (click)=\"showMultiEventDances = !showMultiEventDances\">\n\t\t\t\tMulti event dances:\n\t\t\t\t<ds-hide-icon \n\t\t\t\t\t[hidden]=\"showMultiEventDances\" \n\t\t\t\t\tstrokeColor=\"black\" \n\t\t\t\t\twidth=\".8em\" \n\t\t\t\t\theight=\".8em\"\n\t\t\t\t>\n\t\t\t\t</ds-hide-icon>\n\t\t\t\t<ds-expand-icon \n\t\t\t\t\t[hidden]=\"!showMultiEventDances\" \n\t\t\t\t\tstrokeColor=\"black\" \n\t\t\t\t\twidth=\".8em\" \n\t\t\t\t\theight=\".8em\"\n\t\t\t\t>\n\t\t\t\t</ds-expand-icon>\n\t\t\t</span>\n\t\t</h3>\n\t\t<div [hidden]=\"showMultiEventDances\" class=\"section\">\n\t\t\t<app-multi-dance-form></app-multi-dance-form>\n\t\t</div>\n\t</div>\n</div>"
        },
        {
            "name": "CoupleListComponent",
            "id": "component-CoupleListComponent-9535f7b1fcfd11e9357b494eacc771f4",
            "file": "src/app/couple-list/couple-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-couple-list",
            "styleUrls": [
                "./couple-list.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./couple-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-couple-list',\n  templateUrl: './couple-list.component.html',\n  styleUrls: ['./couple-list.component.sass']\n})\nexport class CoupleListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./couple-list.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>All Couples</h1>"
        },
        {
            "name": "DanceFormComponent",
            "id": "component-DanceFormComponent-1aa92842cfb5605b6dfe6a5c6a7b8a83",
            "file": "src/app/comp-rules-setup/dance-form/dance-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dance-form",
            "styleUrls": [
                "./dance-form.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./dance-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "compSetupServiceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dances",
                    "defaultValue": "[]",
                    "type": "DanceDto[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "firstInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'firstInput'"
                        }
                    ]
                },
                {
                    "name": "linkedDances",
                    "defaultValue": "[]",
                    "type": "Dance[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "multiDanceDanceIds",
                    "defaultValue": "new Set()",
                    "type": "Set<DataKey>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onRowRemoveClick",
                    "args": [
                        {
                            "name": "dance",
                            "type": "DanceDto"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "dance",
                            "type": "DanceDto",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDance",
                    "args": [
                        {
                            "name": "dance",
                            "type": "DanceDto"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "dance",
                            "type": "DanceDto",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reorderClick",
                    "args": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<Dance>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<Dance>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveDance",
                    "args": [
                        {
                            "name": "dance",
                            "type": "Dance"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "dance",
                            "type": "Dance",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Unsubscribable } from 'rxjs';\nimport { CompetitionSetupService, CompKeys } \n\tfrom '../../services/competition-setup/competition-setup.service';\nimport { first } from '../../shared/utils/arrayHelpers';\nimport { Category, Competition, Dance, DanceDto } from '../../types/data-shape';\nimport { DataKey } from '../../types/data-key';\nimport { DirectionEventArg } from '../../types/directions';\n\n\n@Component({\n  selector: 'dance-form',\n  templateUrl: './dance-form.component.html',\n  styleUrls: ['./dance-form.component.sass']\n})\nexport class DanceFormComponent implements OnInit {\n\n\tcompSetupServiceUnsub: Unsubscribable;\n\tdances: DanceDto[] = [];\n\tlinkedDances: Dance[] = [];\n\tcategories: Category[] = [];\n\tmultiDanceDanceIds: Set<DataKey> = new Set();\n\n\t@ViewChild('firstInput') firstInput: ElementRef;\n\n\tconstructor(private competitionSetup$: CompetitionSetupService) \n\t{ }\n\n  ngOnInit(): void {\n\t\tthis.compSetupServiceUnsub = this.competitionSetup$.subscribe(\n\t\t\t(value: Competition) => {\n\t\t\t\tconst danceMap = new Map(value.dances.map(d => [d.id, d]));\n\t\t\t\tconst catMap = new Map(value.categories.map(c => [c.id, c]));\n\t\t\t\tthis.dances = value.dances.map(d => ({\n\t\t\t\t\t...d,\n\t\t\t\t\tcategory: catMap.get(d.categoryId),\n\t\t\t\t\tlinkedDances: d.linkedDanceIds.map(k => danceMap.get(k))\n\t\t\t\t}));\n\t\t\t\tthis.categories = value.categories;\n\t\t\t\tthis.linkedDances = value.dances;\n\t\t\t\tvalue.multiDances.flatMap(md => md.linkedDanceIds)\n\t\t\t\t\t.forEach(id => this.multiDanceDanceIds.add(id as DataKey));\n\t\t\t}\n\t\t);\n\t}\n\n\treorderClick(eventArg: DirectionEventArg<Dance>): void {\n\t\tthis.competitionSetup$\n\t\t\t.moveItem(eventArg.item, eventArg.direction, CompKeys.dances);\n\t}\n\n\tonSubmit(formGroup: FormGroup): void {\n\t\tif(!formGroup.valid){\n\t\t\tformGroup.markAllAsTouched();\n\t\t}\n\t\telse {\n\t\t\tconst formVal = formGroup.value;\n\t\t\tconst linkedIds = formVal.linkedDances?.map(d => d.id) || [];\n\t\t\tthis.saveDance({\n\t\t\t\tname: formVal.name,\n\t\t\t\tshortName: formVal.shortName,\n\t\t\t\tcategoryId: (first(formVal.category) as Category).id,\n\t\t\t\torder: null,\n\t\t\t\tid: null,\n\t\t\t\tlinkedDanceIds: linkedIds,\n\t\t\t});\n\t\t\tformGroup.reset({}, {emitEvent: false});\n\t\t}\n\t}\n\n\tsaveDance(dance: Dance): void {\n\t\tconst dances = this.competitionSetup$\n\t\t\t.addItem(dance, CompKeys.dances) as Dance[];\n\t\tif(dance.linkedDanceIds?.length > 0) {\n\t\t\tconst updated = dances.map(d => {\n\t\t\t\tif(dance.linkedDanceIds.some(k => k === d.id)) {\n\t\t\t\t\treturn {...d, linkedDanceIds: [...(d.linkedDanceIds || []), dance.id]};\n\t\t\t\t}\n\t\t\t\treturn d;\n\t\t\t});\n\t\t\tthis.competitionSetup$.replaceAll(updated, CompKeys.dances);\n\t\t\treturn;\n\t\t}\n\t\tthis.competitionSetup$.replaceAll(dances, CompKeys.dances);\n\t}\n\n\tonRowRemoveClick(dance: DanceDto) {\n\t\tconst hasDependants = this.multiDanceDanceIds.has(dance.id as DataKey);\n\t\tif(hasDependants) {\n\t\t\talert('Dance could not be removed because some multi dances are using it');\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tthis.removeDance(dance);\n\t\t}\n\t}\n\n\tremoveDance(dance: DanceDto): void {\n\t\tconst dances: Dance[] = this.competitionSetup$.get(CompKeys.dances);\n\t\tconst filtered = dances\n\t\t\t.filter(i => i.id != dance.id);\n\t\tif(dance.linkedDances?.length > 0) {\n\t\t\tconst keySet = new Set<DataKey>(dance.linkedDances.map(d => d.id));\n\t\t\tconst filteredModified = filtered.map(d => {\n\t\t\t\tif(keySet.has(d.id)) {\n\t\t\t\t\treturn { ...d, \n\t\t\t\t\t\tlinkedDanceIds: d.linkedDanceIds.filter(k => k !== dance.id)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn d;\n\t\t\t});\n\t\t\tthis.competitionSetup$.replaceAll(filteredModified, CompKeys.dances);\n\t\t\treturn;\n\t\t}\n\t\tthis.competitionSetup$.replaceAll(filtered, CompKeys.dances);\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.compSetupServiceUnsub.unsubscribe();\n\t}\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../styles'\n@use '../comp-rules-setup.component' as pageParent\n\ntd:nth-child(2), td:nth-child(3)\n\twidth: 90px\n\ntd, th\n\tpadding-left: pageParent.$cell-left-padding\n\np\n\tmargin-left: .5em",
                    "styleUrl": "./dance-form.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p *ngIf=\"categories?.length < 1\">\n\tNo dance categories have been added. Please add some.\n</p>\n<form \n\t*ngIf=\"categories?.length > 0\"\n\t#danceForm=\"ngForm\" \n\t(ngSubmit)=\"onSubmit(danceForm.form)\" \n\tautocomplete=\"off\"\n>\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th></th>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th>Short Name</th>\n\t\t\t\t<th>Category</th>\n\t\t\t\t<th *ngIf=\"dances?.length > 0\">Linked Dances</th>\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr *ngFor=\"let dance of dances\">\n\t\t\t\t<td>\n\t\t\t\t\t<ds-up-down (reorderClick)=\"reorderClick($event)\" \n\t\t\t\t\t\t[associatedItem]=\"dance\"\n\t\t\t\t\t\t[size]=\"dances.length\"\n\t\t\t\t\t>\n\t\t\t\t\t</ds-up-down>\n\t\t\t\t</td>\n\t\t\t\t<td>{{dance.name}}</td>\n\t\t\t\t<td>{{dance.shortName || dance.name}}</td>\n\t\t\t\t<td>{{dance?.category?.name}}</td>\n\t\t\t\t<td *ngIf=\"dances.length > 0\">\n\t\t\t\t\t<app-tag-list \n\t\t\t\t\t\treadonly=\"true\"\n\t\t\t\t\t\t[value]=\"dance.linkedDances\"\n\t\t\t\t\t>\n\t\t\t\t\t</app-tag-list>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<button (click)=\"onRowRemoveClick(dance)\" \n\t\t\t\t\ttype=\"button\" \n\t\t\t\t\tclass=\"add-row-btn\">-</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot>\n\t\t\t<tr>\n\t\t\t\t<td></td>\n\t\t\t\t<td>\n\t\t\t\t\t<label for=\"name\">Name</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\tname=\"name\" \n\t\t\t\t\t\tngModel \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tclass=\"age-group-width\"\n\t\t\t\t\t\t#name=\"ngModel\"\n\t\t\t\t\t\t#firstInput\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<div \n\t\t\t\t\t\t*ngIf=\"!(name.valid || name.untouched)\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>\n\t\t\t\t\t\tName is required\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<label for=\"shortName\">Short Name</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\tname=\"shortName\" \n\t\t\t\t\t\tngModel \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tclass=\"age-group-width\"\n\t\t\t\t\t/>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<label for=\"name\">Category</label>\n\t\t\t\t\t<app-select\n\t\t\t\t\t\tname=\"category\"\n\t\t\t\t\t\tngModel\n\t\t\t\t\t\trequired\n\t\t\t\t\t\t#category=\"ngModel\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<app-select-option test=\"empty\">Select...</app-select-option>\n\t\t\t\t\t\t<app-select-option\n\t\t\t\t\t\t\t*ngFor=\"let category of categories\" \n\t\t\t\t\t\t\t[value]=\"category\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{category.name}}\n\t\t\t\t\t\t</app-select-option>\n\t\t\t\t\t</app-select>\n\t\t\t\t\t<div \n\t\t\t\t\t\t*ngIf=\"!(category.valid || category.untouched)\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>\n\t\t\t\t\t\tCategory is required\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td *ngIf=\"dances?.length > 0\">\n\t\t\t\t\t<app-select\n\t\t\t\t\t\tmultiple=\"true\"\n\t\t\t\t\t\tngModel\n\t\t\t\t\t\tname=\"linkedDances\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<app-select-option\n\t\t\t\t\t\t\t*ngFor=\"let dance of linkedDances\"\n\t\t\t\t\t\t\t[value]=\"dance\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t{{dance.name}}\n\t\t\t\t\t\t</app-select-option>\n\t\t\t\t\t</app-select>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<button class=\"add-row-btn\">+</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n</form>\n"
        },
        {
            "name": "EditPersonModalComponent",
            "id": "component-EditPersonModalComponent-67d31dcaa62deb81ac56c2a5bb6049ba",
            "file": "src/app/person-list/edit-person-modal/edit-person-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-dancer-modal",
            "styleUrls": [
                "./edit-person-modal.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-person-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditPersonModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "schoolChoices",
                    "type": "School[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "serviceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Unsubscribable } from 'rxjs';\nimport { SchoolsService } from 'src/app/services/schools/schools.service';\nimport { Person, School } from 'src/app/types/data-shape';\n\n\n\n@Component({\n  selector: 'app-add-dancer-modal',\n  templateUrl: './edit-person-modal.component.html',\n  styleUrls: ['./edit-person-modal.component.sass']\n})\nexport class EditPersonModalComponent implements OnInit {\n\n\tschoolChoices: School[];\n\tloading = true;\n\tprivate serviceUnsub: Unsubscribable;\n\n\tconstructor(public dialogRef: MatDialogRef<EditPersonModalComponent>,\n\t\t@Inject(MAT_DIALOG_DATA) public data: Person,\n\t\tprivate schoolService: SchoolsService) { }\n\n  ngOnInit(): void {\n\t\tthis.serviceUnsub = this.schoolService.subscribe(\n\t\t\t(value: School[]) => {\n\t\t\t\tthis.schoolChoices = value;\n\t\t\t\tthis.loading = false;\n\t\t\t})\n  }\n\n\tonCancel(): void {\n\t\tthis.dialogRef.close();\n\t}\n\t\n\tngOnDestroy(): void {\n\t\tthis.serviceUnsub.unsubscribe();\n\t}\n\t\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../styles'\n@use '../../../modalStyles'\n",
                    "styleUrl": "./edit-person-modal.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditPersonModalComponent>"
                    },
                    {
                        "name": "data",
                        "type": "Person"
                    },
                    {
                        "name": "schoolService",
                        "type": "SchoolsService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditPersonModalComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Person",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "schoolService",
                        "type": "SchoolsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"loading\">\n\t<mat-spinner></mat-spinner>\n</div>\n<div *ngIf=\"!loading\">\n\t<div>\n\t\t\t<div>\n\t\t\t\t<label for=\"firstName\">First Name:</label>\n\t\t\t\t<input \n\t\t\t\t\tname=\"firstName\"\n\t\t\t\t\tplaceholder=\"First Name:\"\n\t\t\t\t\t[(ngModel)]=\"data.firstName\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label for=\"lastName\">Last Name:</label>\n\t\t\t\t<input \n\t\t\t\t\tname=\"lastName\"\n\t\t\t\t\tplaceholder=\"Last Name:\"\n\t\t\t\t\t[(ngModel)]=\"data.lastName\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<label for=\"schoolId\">School:</label>\n\t\t\t\t<app-select\n\t\t\t\t\tname=\"schoolId\"\n\t\t\t\t\t[(ngModel)]=\"data.schoolId\"\n\t\t\t\t>\n\t\t\t\t\t<app-select-option>Select...</app-select-option>\n\t\t\t\t\t<app-select-option\n\t\t\t\t\t\t*ngFor=\"let school of schoolChoices\" \n\t\t\t\t\t\t[value]=\"school.id\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{school.name}}\n\t\t\t\t\t</app-select-option>\n\t\t\t\t</app-select>\n\t\t\t</div>\n\t</div>\n\t<div>\n\t\t<button class=\"add-btn\" (click)=\"onCancel()\">Cancel</button>\n\t\t<button class=\"add-btn\" [mat-dialog-close]=\"data\">Add Person</button>\n\t</div>\n</div>\n\n"
        },
        {
            "name": "EditSchoolModalComponent",
            "id": "component-EditSchoolModalComponent-d7b6130404d3f722610a1b070f8e9981",
            "file": "src/app/school-list/edit-school-modal/edit-school-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-school-modal",
            "styleUrls": [
                "./edit-school-modal.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-school-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "School",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditSchoolModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { School } from 'src/app/types/data-shape';\n\n\n@Component({\n  selector: 'app-edit-school-modal',\n  templateUrl: './edit-school-modal.component.html',\n  styleUrls: ['./edit-school-modal.component.sass']\n})\nexport class EditSchoolModalComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<EditSchoolModalComponent>,\n\t\t@Inject(MAT_DIALOG_DATA) public data: School) { }\n\n  ngOnInit(): void {\n\t}\n\t\n\tonCancel(): void {\n\t\tthis.dialogRef.close();\n\t}\n\n\tngOnDestroy(): void {\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../styles'\n@use '../../../modalStyles'\n",
                    "styleUrl": "./edit-school-modal.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditSchoolModalComponent>"
                    },
                    {
                        "name": "data",
                        "type": "School"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditSchoolModalComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "School",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Add School</h1>\n<div>\n\t\t<label for=\"name\">Name:</label>\n\t\t<input \n\t\t\tname=\"name\"\n\t\t\tplaceholder=\"Name:\"\n\t\t\t[(ngModel)]=\"data.name\"\n\t\t\ttype=\"text\"\n\t\t/>\n\t\t<label for=\"location\">Location:</label>\n\t\t<input \n\t\t\tname=\"location\"\n\t\t\tplaceholder=\"Location:\"\n\t\t\t[(ngModel)]=\"data.location\"\n\t\t\ttype=\"text\"\n\t\t/>\n</div>\n<div>\n\t<button class=\"add-btn\" (click)=\"onCancel()\">Cancel</button>\n\t<button class=\"add-btn\" [mat-dialog-close]=\"data\">Add School</button>\n</div>"
        },
        {
            "name": "ExpandIconComponent",
            "id": "component-ExpandIconComponent-9c295cdf96552916421b2821af2892c2",
            "file": "src/app/shared/components/icons/icons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ds-expand-icon",
            "styleUrls": [
                "./icons.component.sass"
            ],
            "styles": [],
            "template": "<svg class=\"expand-icon\" viewBox=\"0 0 12.5 12.5\"\n\t[style.stroke]=\"strokeColor\"\n\t[style.width]=\"width\"\n\t[style.height]=\"height\"\n>\n\t<path d=\"M4.5,11.25 l5,-5 l-5,-5\" fill=\"none\" />\n</svg>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Directive, Input } from '@angular/core';\n\n@Directive()\nclass Icon {\n\t@Input() strokeColor: string;\n\t@Input() width: number;\n\t@Input() height: number;\n}\n\n@Component({\n\tselector: 'ds-expand-icon',\n\ttemplate: `\n\t\t<svg class=\"expand-icon\" viewBox=\"0 0 12.5 12.5\" \n\t\t\t[style.stroke]=\"strokeColor\"\n\t\t\t[style.width]=\"width\"\n\t\t\t[style.height]=\"height\"\n\t\t>\n\t\t\t<path d=\"M4.5,11.25 l5,-5 l-5,-5\" fill=\"none\" />\n\t\t</svg>`,\n\tstyleUrls: ['./icons.component.sass']\n})\nexport class ExpandIconComponent extends Icon {}\n\n\n@Component({\n\tselector: 'ds-hide-icon',\n\ttemplate: `\n\t\t<svg class=\"hide-icon\" viewBox=\"0 0 12.5 12.5\" \n\t\t\t[style.stroke]=\"strokeColor\"\n\t\t\t[style.width]=\"width\"\n\t\t\t[style.height]=\"height\"\n\t\t>\n\t\t\t<path d=\"M1.25,5 l5,5 l5,-5\" fill=\"none\" />\n\t\t</svg>`,\n\tstyleUrls: ['./icons.component.sass']\n})\nexport class HideIconComponent extends Icon {}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles'\n\n.hide-icon\n\tstroke: black",
                    "styleUrl": "./icons.component.sass"
                }
            ],
            "stylesData": "",
            "extends": "Icon"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HideIconComponent",
            "id": "component-HideIconComponent-9c295cdf96552916421b2821af2892c2",
            "file": "src/app/shared/components/icons/icons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ds-hide-icon",
            "styleUrls": [
                "./icons.component.sass"
            ],
            "styles": [],
            "template": "<svg class=\"hide-icon\" viewBox=\"0 0 12.5 12.5\"\n\t[style.stroke]=\"strokeColor\"\n\t[style.width]=\"width\"\n\t[style.height]=\"height\"\n>\n\t<path d=\"M1.25,5 l5,5 l5,-5\" fill=\"none\" />\n</svg>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Directive, Input } from '@angular/core';\n\n@Directive()\nclass Icon {\n\t@Input() strokeColor: string;\n\t@Input() width: number;\n\t@Input() height: number;\n}\n\n@Component({\n\tselector: 'ds-expand-icon',\n\ttemplate: `\n\t\t<svg class=\"expand-icon\" viewBox=\"0 0 12.5 12.5\" \n\t\t\t[style.stroke]=\"strokeColor\"\n\t\t\t[style.width]=\"width\"\n\t\t\t[style.height]=\"height\"\n\t\t>\n\t\t\t<path d=\"M4.5,11.25 l5,-5 l-5,-5\" fill=\"none\" />\n\t\t</svg>`,\n\tstyleUrls: ['./icons.component.sass']\n})\nexport class ExpandIconComponent extends Icon {}\n\n\n@Component({\n\tselector: 'ds-hide-icon',\n\ttemplate: `\n\t\t<svg class=\"hide-icon\" viewBox=\"0 0 12.5 12.5\" \n\t\t\t[style.stroke]=\"strokeColor\"\n\t\t\t[style.width]=\"width\"\n\t\t\t[style.height]=\"height\"\n\t\t>\n\t\t\t<path d=\"M1.25,5 l5,5 l5,-5\" fill=\"none\" />\n\t\t</svg>`,\n\tstyleUrls: ['./icons.component.sass']\n})\nexport class HideIconComponent extends Icon {}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles'\n\n.hide-icon\n\tstroke: black",
                    "styleUrl": "./icons.component.sass"
                }
            ],
            "stylesData": "",
            "extends": "Icon"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-92a0068e587721783476ef2dc67bafcf",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddCompModalComponent } from '../add-comp-modal/add-comp-modal.component';\nimport { CompetitionSetupService } \n\tfrom '../services/competition-setup/competition-setup.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.sass']\n})\nexport class HomeComponent implements OnInit {\n\n\tconstructor(public dialog: MatDialog, \n\t\tprivate competitionService$: CompetitionSetupService) \n\t{ }\n\n  ngOnInit(): void {\n\t}\n\t\n\topenDialog() {\n\t\tconst diaglogRef = this.dialog.open(AddCompModalComponent, {\n\t\t\twidth: '275px',\n\t\t\tdata: { id: null, name: null }\n\t\t});\n\n\t\tdiaglogRef.afterClosed().subscribe(result => {\n\t\t\tif(!result) return;\n\t\t\tconsole.log(result);\n\t\t});\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../styles'",
                    "styleUrl": "./home.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "competitionService$",
                        "type": "CompetitionSetupService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "competitionService$",
                        "type": "CompetitionSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button class=\"add-btn\" (click)=\"openDialog()\">Add New Competition</button>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-e91ce1833152faa91139278c880ad05d",
            "file": "src/app/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [
                "./menu.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "routeDescriptions",
                    "line": 11,
                    "type": "DanceSchedulerRoute[]"
                },
                {
                    "name": "styleOverrides",
                    "line": 12,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { DanceSchedulerRoute } from '../routeDefintions';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.sass']\n})\nexport class MenuComponent implements OnInit {\n\n\t@Input() routeDescriptions: DanceSchedulerRoute[];\n\t@Input('styleOverrides') currentStyles: {};\n\n  constructor() { }\n\n  ngOnInit(): void {\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../styles'\n\n$width-menu-base: 200px\n$padding-left-ul: 30px\n\nul\n\tlist-style: none\n\tpadding-left: $padding-left-ul\n\toverflow: hidden\n\twhite-space: nowrap\n\nli\n\tmargin-bottom: .7em\n\na\n\tcolor: styles.$fg-color-menu-text\n\tdisplay: block\n\ttext-decoration: none\n\tfont-variant-caps: all-small-caps\n\tfont-size: 1.2em\n\tletter-spacing: .05em\n\toverflow: hidden\n\ttext-overflow: ellipsis\n\n\t&:visted\n\t\tcolor: styles.$fg-color-menu-text\n\t\t\t\n\n",
                    "styleUrl": "./menu.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"menu-base\" [style]=\"currentStyles\">\n\t<ul>\n\t\t<li \n\t\t\t*ngFor=\"let path of routeDescriptions\">\n\t\t\t\t<a href=\"/{{path.path}}\">\n\t\t\t\t\t{{path.display}}\n\t\t\t\t</a>\n\t\t\t</li>\n\t</ul>\n</div>\n"
        },
        {
            "name": "MultiDanceFormComponent",
            "id": "component-MultiDanceFormComponent-4e4c43822ad99c67f44710497fdc9bf6",
            "file": "src/app/comp-rules-setup/multi-dance-form/multi-dance-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-multi-dance-form",
            "styleUrls": [
                "./multi-dance-form.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-dance-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "compSetupServiceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "danceChoices",
                    "defaultValue": "[]",
                    "type": "Dance[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dances",
                    "defaultValue": "[]",
                    "type": "MultiDanceDto[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "firstInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'firstInput'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onRowRemoveClick",
                    "args": [
                        {
                            "name": "dance",
                            "type": "MultiDanceDto"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "dance",
                            "type": "MultiDanceDto",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reorderClick",
                    "args": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<MultiDance>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<MultiDance>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Unsubscribable } from 'rxjs';\nimport { CompetitionSetupService, CompKeys } from 'src/app/services/competition-setup/competition-setup.service';\nimport { first } from 'src/app/shared/utils/arrayHelpers';\nimport { Category, Competition, Dance, MultiDance, MultiDanceDto } from 'src/app/types/data-shape';\nimport { DirectionEventArg } from 'src/app/types/directions';\n\n@Component({\n  selector: 'app-multi-dance-form',\n  templateUrl: './multi-dance-form.component.html',\n  styleUrls: ['./multi-dance-form.component.sass']\n})\nexport class MultiDanceFormComponent implements OnInit {\n\n\tcompSetupServiceUnsub: Unsubscribable;\n\tcategories: Category[] = [];\n\tdanceChoices: Dance[] = [];\n\tdances: MultiDanceDto[] = [];\n\n\t@ViewChild('firstInput') firstInput: ElementRef;\n\n  constructor(private competitionSetup$: CompetitionSetupService) { }\n\n  ngOnInit(): void {\n\t\tthis.compSetupServiceUnsub = this.competitionSetup$.subscribe(\n\t\t\t(value: Competition) => {\n\t\t\t\tconst danceMap = new Map(value.dances.map(d => [d.id, d]));\n\t\t\t\tconst catMap = new Map(value.categories.map(c => [c.id, c]));\n\t\t\t\tthis.dances = value.multiDances.map(d => ({\n\t\t\t\t\t...d,\n\t\t\t\t\tcategory: catMap.get(d.categoryId),\n\t\t\t\t\tlinkedDances: d.linkedDanceIds.map(k => danceMap.get(k))\n\t\t\t\t}));\n\t\t\t\tthis.categories = value.categories;\n\t\t\t\tthis.danceChoices = value.dances;\n\t\t\t}\n\t\t);\n\t}\n\n\treorderClick(eventArg: DirectionEventArg<MultiDance>): void {\n\t\tthis.competitionSetup$\n\t\t\t.moveItem(eventArg.item, eventArg.direction, CompKeys.multiDances);\n\t}\n\n\tonRowRemoveClick(dance: MultiDanceDto) {\n\t\tthis.competitionSetup$\n\t\t .removeItems(i => i.id !== dance.id, CompKeys.multiDances);\n\t}\n\t\n\tonSubmit(formGroup: FormGroup): void {\n\t\tif(!formGroup.valid){\n\t\t\tformGroup.markAllAsTouched();\n\t\t}\n\t\telse {\n\t\t\tconst formVal = formGroup.value;\n\t\t\tthis.competitionSetup$.saveItem({\n\t\t\t\tcategoryId: (first(formVal.category) as Category).id,\n\t\t\t\tlinkedDanceIds: formVal.linkedDances.map(d => d.id)\n\t\t\t} as MultiDance, CompKeys.multiDances);\n\t\t\tformGroup.reset({}, {emitEvent: false});\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.compSetupServiceUnsub.unsubscribe();\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../styles'\n@use '../comp-rules-setup.component' as pageParent\n\n\ntd, th\n\tpadding-left: pageParent.$cell-left-padding\n\np\n\tmargin-left: .5em",
                    "styleUrl": "./multi-dance-form.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p *ngIf=\"categories?.length < 1\">\n\tNo dance categories have been added. Please add some.\n</p>\n<p *ngIf=\"danceChoices?.length < 1\">\n\tNo single dances have been added. Please add some.\n</p>\n<form \n\t*ngIf=\"categories?.length > 0 && danceChoices?.length > 0\"\n\t#multiDanceForm=\"ngForm\" \n\t(ngSubmit)=\"onSubmit(multiDanceForm.form)\" \n\tautocomplete=\"off\"\n>\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th></th>\n\t\t\t\t<th>Category</th>\n\t\t\t\t<th>Dances</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr *ngFor=\"let dance of dances\">\n\t\t\t\t<td>\n\t\t\t\t\t<ds-up-down (reorderClick)=\"reorderClick($event)\" \n\t\t\t\t\t\t[associatedItem]=\"dance\"\n\t\t\t\t\t\t[size]=\"dances.length\"\n\t\t\t\t\t>\n\t\t\t\t\t</ds-up-down>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t{{dance.category.name}}\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<app-tag-list \n\t\t\t\t\t\treadonly=\"true\"\n\t\t\t\t\t\t[value]=\"dance.linkedDances\"\n\t\t\t\t\t>\n\t\t\t\t\t</app-tag-list>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<button (click)=\"onRowRemoveClick(dance)\" \n\t\t\t\t\ttype=\"button\" \n\t\t\t\t\tclass=\"add-row-btn\">-</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot>\n\t\t\t<tr>\n\t\t\t\t<td></td>\n\t\t\t\t<td>\n\t\t\t\t\t<label for=\"name\">Category</label>\n\t\t\t\t\t<app-select\n\t\t\t\t\t\tname=\"category\"\n\t\t\t\t\t\tngModel\n\t\t\t\t\t\trequired\n\t\t\t\t\t\t#category=\"ngModel\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<app-select-option test=\"empty\">Select...</app-select-option>\n\t\t\t\t\t\t<app-select-option\n\t\t\t\t\t\t\t*ngFor=\"let category of categories\" \n\t\t\t\t\t\t\t[value]=\"category\"\n\t\t\t\t\t\t\t[test]=\"category.name\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{category.name}}\n\t\t\t\t\t\t</app-select-option>\n\t\t\t\t\t</app-select>\n\t\t\t\t\t<div \n\t\t\t\t\t\t*ngIf=\"!(category.valid || category.untouched)\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>\n\t\t\t\t\t\tCategory is required\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<app-select\n\t\t\t\t\t\tmultiple=\"true\"\n\t\t\t\t\t\tngModel\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tname=\"linkedDances\"\n\t\t\t\t\t\t#linkedDances=\"ngModel\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<app-select-option\n\t\t\t\t\t\t\t*ngFor=\"let dance of danceChoices\"\n\t\t\t\t\t\t\t[value]=\"dance\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t{{dance.name}}\n\t\t\t\t\t\t</app-select-option>\n\t\t\t\t\t</app-select>\n\t\t\t\t\t<div \n\t\t\t\t\t\t*ngIf=\"!(linkedDances.valid || linkedDances.untouched)\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>\n\t\t\t\t\t\tAt least one dance is required\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<button class=\"add-row-btn\">+</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n</form>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PersonListComponent",
            "id": "component-PersonListComponent-b0f6a7222b009a0cfd0848eff529561a",
            "file": "src/app/person-list/person-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dancer-list",
            "styleUrls": [
                "./person-list.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./person-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "type": "DanceAppDataSource<Person | PersonDto>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'school']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "itemCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "serviceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "viewItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "Person"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Unsubscribable } from 'rxjs';\nimport { EditPersonModalComponent } \n\tfrom './edit-person-modal/edit-person-modal.component';\nimport { Person, PersonDto } from '../types/data-shape';\nimport { PersonsService } from '../services/persons/persons.service';\nimport { DanceAppDataSource } from '../shared/utils/DanceAppDataSource';\nimport { TableStats } from '../types/table-stats';\n\n@Component({\n  selector: 'app-dancer-list',\n  templateUrl: './person-list.component.html',\n  styleUrls: ['./person-list.component.sass']\n})\nexport class PersonListComponent implements OnInit {\n\n\tdataSource: DanceAppDataSource<Person, PersonDto>;\n\tdisplayedColumns = ['name', 'school'];\n\titemCount = 0;\n\tloading = true;\n\tprivate serviceUnsub: Unsubscribable;\n\n\tconstructor(public dialog: MatDialog,\n\t\tprivate personService: PersonsService) \n\t{ \n\t\tthis.dataSource = new DanceAppDataSource(personService);\n\t}\n\n  ngOnInit(): void {\n\t\tthis.serviceUnsub = this.personService.subscribeStats(\n\t\t\t(value: TableStats) => {\n\t\t\t\tthis.itemCount = value.itemCount;\n\t\t\t\tthis.loading = value.loading;\n\t\t\t});\n\t}\n\t\n\topenDialog(): void {\n\t\tconst dialogRef = this.dialog.open(EditPersonModalComponent, {\n\t\t\twidth: '275px',\n\t\t\tdata: { firstName: null, lastName: null, schoolId: null }\n\t\t});\n\n\t\tdialogRef.afterClosed().subscribe(result => {\n\t\t\tif(!result) return;\n\t\t\tthis.personService.saveItem(result);\n\t\t});\n\t}\n\n\tviewItem(item: Person): void {\n\t\tconsole.log(item);\n\t}\n\n\tngDestroy(): void {\n\t\tthis.serviceUnsub.unsubscribe();\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../styles'\n\t\ntable \n\twidth: 100%\n\n.table-container\n\tmargin-top: 1em",
                    "styleUrl": "./person-list.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "personService",
                        "type": "PersonsService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>All Dancers</h1>\n<div *ngIf=\"loading\">\n\t<mat-spinner></mat-spinner>\n</div>\n<div *ngIf=\"!loading\">\n\t<div>\n\t\t<Button class=\"add-btn\" (click)=\"openDialog()\">Add Dancer</Button>\n\t</div>\n\t<div *ngIf=\"itemCount > 0\" class=\"mat-elevation-z1 table-container\">\n\t\t<table mat-table [dataSource]=\"dataSource\">\n\t\t\t<ng-container matColumnDef=\"name\">\n\t\t\t\t<th mat-header-cell *matHeaderCellDef>Name</th>\n\t\t\t\t<td mat-cell *matCellDef=\"let element\">\n\t\t\t\t\t{{element.firstName + \" \" + element.lastName}}\n\t\t\t\t</td>\n\t\t\t</ng-container>\n\n\t\t\t<ng-container matColumnDef=\"school\">\n\t\t\t\t<th mat-header-cell *matHeaderCellDef>School</th>\n\t\t\t\t<td mat-cell *matCellDef=\"let element\">\n\t\t\t\t\t{{element.school.name}}\n\t\t\t\t</td>\n\t\t\t</ng-container>\n\t\n\t\n\t\t\t<tr \n\t\t\t\tmat-header-row \n\t\t\t\t*matHeaderRowDef=\"displayedColumns; sticky: true\"\n\t\t\t\t></tr>\n\t\t\t<tr mat-row \n\t\t\t\t*matRowDef=\"let row; columns: displayedColumns\"\n\t\t\t\tclass=\"selectable-row\"\n\t\t\t\t(click)=\"viewItem(row)\"\n\t\t\t></tr>\n\t\t</table>\n\t</div>\n\t<div *ngIf=\"itemCount < 1\">\n\t\t<h2>No dancers have been added</h2>\n\t</div>\n</div>"
        },
        {
            "name": "SchoolListComponent",
            "id": "component-SchoolListComponent-d0aafda0af265f64ed5130ec95e520f0",
            "file": "src/app/school-list/school-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-school-list",
            "styleUrls": [
                "./school-list.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./school-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "type": "DanceAppDataSource<School>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['name', 'location']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "itemCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pageSize",
                    "defaultValue": "25",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "pageSizeOptions",
                    "defaultValue": "[25, 100]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "serviceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "viewItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "School"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "School",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EditSchoolModalComponent } \n\tfrom './edit-school-modal/edit-school-modal.component';\nimport { School } from '../types/data-shape';\nimport { SchoolsService } from '../services/schools/schools.service';\nimport { DanceAppDataSource } from '../shared/utils/DanceAppDataSource';\nimport { Unsubscribable } from 'rxjs';\nimport { TableStats } from '../types/table-stats';\n\n@Component({\n  selector: 'app-school-list',\n  templateUrl: './school-list.component.html',\n  styleUrls: ['./school-list.component.sass']\n})\nexport class SchoolListComponent implements OnInit {\n\n\n\tdataSource: DanceAppDataSource<School>;\n\tdisplayedColumns = ['name', 'location'];\n\titemCount = 0;\n\tloading = true;\n\tpageSize = 25;\n\tpageSizeOptions = [25, 100];\n\tprivate serviceUnsub: Unsubscribable;\n\n\n\tconstructor(public dialog: MatDialog, \n\t\tprivate schoolService: SchoolsService) \n\t{ \n\t\tthis.dataSource = new DanceAppDataSource(schoolService);\n\t}\n\n  ngOnInit(): void {\n\t\tthis.serviceUnsub = this.schoolService.subscribeStats(\n\t\t\t(value: TableStats) => {\n\t\t\t\tthis.itemCount = value.itemCount;\n\t\t\t\tthis.loading = value.loading;\n\t\t\t})\n\t}\n\t\n\topenDialog(): void {\n\t\tconst dialogRef = this.dialog.open(EditSchoolModalComponent, {\n\t\t\twidth: '275px',\n\t\t\tdata: { name: null, location: null }\n\t\t});\n\n\t\tdialogRef.afterClosed().subscribe(result => {\n\t\t\tif(!result) return;\n\t\t\tthis.schoolService.saveItem(result);\n\t\t});\n\t}\n\n\tviewItem(item: School): void {\n\t\tconsole.log(item);\n\t}\n\n\tngDestroy(): void {\n\t\tthis.serviceUnsub.unsubscribe();\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../styles'\n\t\ntable \n\twidth: 100%\n\n.table-container\n\tmargin-top: 1em",
                    "styleUrl": "./school-list.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "schoolService",
                        "type": "SchoolsService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "schoolService",
                        "type": "SchoolsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>All Schools</h1>\n<div *ngIf=\"loading\">\n\t<mat-spinner></mat-spinner>\n</div>\n<div *ngIf=\"!loading\">\n\t<div>\n\t\t<Button class=\"add-btn\" (click)=\"openDialog()\">Add School</Button>\n\t</div>\n\t<div *ngIf=\"itemCount > 0\" class=\"mat-elevation-z1 table-container\">\n\t\t<table mat-table [dataSource]=\"dataSource\">\n\t\t\t<ng-container matColumnDef=\"name\">\n\t\t\t\t<th mat-header-cell *matHeaderCellDef>Name</th>\n\t\t\t\t<td mat-cell *matCellDef=\"let element\">{{element.name}}</td>\n\t\t\t</ng-container>\n\t\n\t\t\t<ng-container matColumnDef=\"location\">\n\t\t\t\t<th mat-header-cell *matHeaderCellDef>Location</th>\n\t\t\t\t<td mat-cell *matCellDef=\"let element\">{{element.location}}</td>\n\t\t\t</ng-container>\n\t\n\t\t\t<tr \n\t\t\t\tmat-header-row \n\t\t\t\t*matHeaderRowDef=\"displayedColumns; sticky: true\"\n\t\t\t\t></tr>\n\t\t\t<tr mat-row \n\t\t\t\t*matRowDef=\"let row; columns: displayedColumns\"\n\t\t\t\tclass=\"selectable-row\"\n\t\t\t\t(click)=\"viewItem(row)\"\n\t\t\t></tr>\n\t\t</table>\n\t</div>\n\t<div *ngIf=\"itemCount < 1\">\n\t\t<h2>No schools have been added</h2>\n\t</div>\n</div>"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-3f83b0e9c2c25c10481449810b68c080",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: SELECT_CONFIG, useFactory: () => new BehaviorSubject<SelectConfig | null>(null)\n}"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customStyle",
                    "defaultValue": "null",
                    "line": 73,
                    "type": "any"
                },
                {
                    "name": "defaultDisplay",
                    "defaultValue": "'Select...'",
                    "line": 72,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "line": 71,
                    "type": "boolean"
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "line": 70,
                    "type": "boolean"
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 68,
                    "type": "string"
                },
                {
                    "name": "value",
                    "defaultValue": "[]",
                    "line": 69,
                    "type": "unknown[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelected",
                    "defaultValue": "new EventEmitter<unknown[]>()",
                    "line": 74,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "childrenChangeUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "containerClass",
                    "defaultValue": "closedMenuClass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "custom",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'custom'"
                        }
                    ]
                },
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "highlightedMenuItemIdx",
                    "defaultValue": "-1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "keyContentMap",
                    "defaultValue": "new Map()",
                    "type": "Map<unknown | string>",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "optionElements",
                    "type": "QueryList<SelectOptionComponent>",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SelectOptionComponent"
                        }
                    ]
                },
                {
                    "name": "optionMaxIdx",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "optionsParent",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'optionsParent'"
                        }
                    ]
                },
                {
                    "name": "propagateChange",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "propagateTouch",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "selectConfig",
                    "type": "SelectConfig",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "selectedSet",
                    "type": "Set<unknown>",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "tabNum",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "topId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "methodsClass": [
                {
                    "name": "_chooseOption",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_highlightSearchedOption",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_initializeSelectedValues",
                    "args": [
                        {
                            "name": "selectedItems",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedItems",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_menuOptionHighlight",
                    "args": [
                        {
                            "name": "newIdx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "newIdx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_openMenuKeydownEventBranches",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_replaceValues",
                    "args": [
                        {
                            "name": "selected",
                            "type": "unknown[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 342,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "unknown[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_toggleOptionMulti",
                    "args": [
                        {
                            "name": "option",
                            "type": "DSInput"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 354,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "DSInput",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_toggleOptionSingle",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOptionComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOptionComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSingularDisplayValue",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 390
                },
                {
                    "name": "hasSelectedValue",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 386
                },
                {
                    "name": "lookupContent",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 401,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134
                },
                {
                    "name": "ngDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 408
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100
                },
                {
                    "name": "onChecked",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOptionComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 370,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOptionComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224
                },
                {
                    "name": "onFocusOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231
                },
                {
                    "name": "onTagXClicked",
                    "args": [
                        {
                            "name": "option",
                            "type": "DSInput"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 380,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "DSInput",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showTagList",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 335
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 329
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ContentChildren, Inject, ViewChild } from '@angular/core';\nimport { Component, \n\tElementRef, \n\tEventEmitter, \n\tforwardRef, \n\tHostListener, \n\tInput, \n\tOnInit, \n\tOutput, \n\tQueryList, \n\tSimpleChange } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, \n\tNG_VALIDATORS, \n\tNG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject, noop, Unsubscribable } from 'rxjs';\nimport { DSInput } from 'src/app/types/ds-input';\nimport { isEmptyStr } from '../../utils/anyHelper';\nimport { focusNext } from '../../utils/domHelper';\nimport { SelectConfig, SELECT_CONFIG } from './select-config';\nimport { \n\tSelectOptionComponent } \nfrom './select-option/select-option.component';\n\nconst closedMenuClass = 'menu-container-closed ds-select';\nconst openMenuClass = 'menu-container-open ds-select';\nconst disabledMenuClass = 'menu-container-disabled';\n\nconst skippedKeys = new Set([\n\t'Backspace',\n\t'Tab',\n\t'F1',\n\t'F1',\n\t'F2',\n\t'F3',\n\t'F4',\n\t'F5',\n\t'F6',\n\t'F7',\n\t'F8',\n\t'F9',\n\t'F10',\n\t'F11',\n\t'F12'\n]);\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n\tstyleUrls: ['./select.component.sass'],\n\tproviders: [{\n\t\tprovide: NG_VALUE_ACCESSOR,\n\t\tuseExisting: forwardRef(() => SelectComponent),\n\t\tmulti: true,\n\t},\n\t{\n\t\tprovide: SELECT_CONFIG,\n\t\tuseFactory: () => new BehaviorSubject<SelectConfig | null>(null)\n\t},\n\t{\n\t\tprovide: NG_VALIDATORS,\n\t\tuseExisting: forwardRef(() => SelectComponent),\n\t\tmulti: true,\n\t}\n]\n})\nexport class SelectComponent implements OnInit, ControlValueAccessor {\n\n\t@Input('name') controlName: string = '';\n\t@Input('value') selectedItems: unknown[] = [];\n\t@Input('multiple') allowMultiSelect: boolean = false;\n\t@Input('disabled') isDisabled: boolean;\n\t@Input('defaultDisplay') defaultDisplay: string = 'Select...';\n\t@Input('customStyle') customStyle: any = null;\n\t@Output('onSelected') onSelected = new EventEmitter<unknown[]>(); \n\tisOpen: boolean = false;\n\ttopId: string = '';\n\tselectedSet: Set<unknown>;\n\tcontainerClass: string = closedMenuClass;\n\thighlightedMenuItemIdx: number = -1;\n\ttabNum: number;\n\tpropagateChange: (_: any) => {};\n\tpropagateTouch: () => void;\n\thasError: boolean = false;\n\toptionMaxIdx: number = 0; \n\tselectConfig: SelectConfig;\n\tchildrenChangeUnsub: Unsubscribable;\n\tkeyContentMap: Map<unknown, string> = new Map();\n\n\t@ContentChildren(SelectOptionComponent) \n\toptionElements: QueryList<SelectOptionComponent>;\n\n\t@ViewChild('custom') custom: ElementRef;\n\t@ViewChild('optionsParent') optionsParent: ElementRef;\n\n\tconstructor(private elRef: ElementRef, \n\t\t@Inject(SELECT_CONFIG) \n\t\tprivate selectConfig$: BehaviorSubject<SelectConfig>) \n\t{ }\n\t\n\tngOnInit(): void {\n\t\tthis._initializeSelectedValues(this.selectedItems);\n\t\tthis.topId = `ds-select-top-${this.controlName}`;\n\t\tthis.selectConfig = {\n\t\t\tallowMultiSelect: this.allowMultiSelect,\n\t\t\tcontrolName: this.controlName,\n\t\t\tonClickCallback: this.onChecked.bind(this),\n\t\t\tregister: () => ({ idx: this.optionMaxIdx++ }),\n\t\t\tselectedSet: this.selectedSet,\n\t\t};\n\t\tthis.selectConfig$.next(this.selectConfig);\n\t\tif(this.isDisabled) {\n\t\t\tthis.tabNum = -1;\n\t\t\tthis.containerClass = disabledMenuClass;\n\t\t}\n\t}\n\n\t// ngOnChanges(changes: SimpleChange) {\n\t// \tconst optionChanges = changes['options'];\n\t// \tif(optionChanges && !optionChanges.firstChange) {\n\t// \t\tconst prevLength = optionChanges.previousValue?.length;\n\t// \t\t//if something was deleted\n\t// \t\tif(prevLength > optionChanges.currentValue?.length) {\n\t// \t\t\tconst current = optionChanges.currentValue\n\t// \t\t\t\t.map(o => o.key);\n\t// \t\t\tconst currentSet = new Set(optionChanges.currentValue);\n\t// \t\t\tconst selected = asArray(this.selectedItems)\n\t// \t\t\t\t.filter(o => currentSet.has(o.id));\n\t// \t\t\tthis.selectedItems = selected;\n\t// \t\t\tthis.selectedSet = new Set(selected);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tngAfterViewInit(): void {\n\t\tthis.keyContentMap = new Map(this.optionElements.map(c => [c.value, c.content]));\n\t\tthis.childrenChangeUnsub = this.optionElements.changes.subscribe(\n\t\t\t(changes: QueryList<SelectOptionComponent>) => {\n\t\t\t\tthis.keyContentMap = new Map(changes.map(c => [c.value, c.content]));\n\t\t});\n\t}\n\n\twriteValue(obj: any): void {\n\t\tthis._initializeSelectedValues(obj);\n\t}\n\n\tregisterOnChange(fn: any): void {\n\t\tthis.propagateChange = fn;\n\t}\n\n\tregisterOnTouched(fn: any): void {\n\t\tthis.propagateTouch = fn;\n\t}\n\n\tsetDisabledState?(isDisabled: boolean): void {\n\t\tthis.isDisabled = isDisabled;\n\t\tthis.tabNum = isDisabled ? -1 : 0;\n\t\tthis.containerClass = disabledMenuClass;\n\t}\n\n\tvalidate(control: AbstractControl): any {\n\t\tconst validity = (control.value as [])?.length < 1 ? {} : null;\n\t\treturn validity;\n\t}\n\n\tprivate _initializeSelectedValues(selectedItems: any) {\n\t\tif(this.allowMultiSelect) {\n\t\t\tif(Array.isArray(selectedItems)) {\n\t\t\t\tthis.selectedItems = selectedItems;\n\t\t\t\tthis.selectedSet = new Set(selectedItems);\n\t\t\t}\n\t\t\telse if(isEmptyStr(selectedItems)) {\n\t\t\t\tthis.selectedItems = [];\n\t\t\t\tthis.selectedSet = new Set(this.selectedItems);\n\t\t\t\t//I'm only doing this in select places because I fear an infinite loop\n\t\t\t\tthis.propagateChange && this.propagateChange([]);\n\t\t\t}\n\t\t\telse if(typeof selectedItems === 'string') {\n\t\t\t\tthis.selectedItems = selectedItems.split(',');\n\t\t\t\tthis.selectedSet = new Set(this.selectedItems);\n\t\t\t\tthis.propagateChange && this.propagateChange(this.selectedItems);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow Error('When using multi-select, provided value must be array');\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(!Array.isArray(selectedItems)) {\n\t\t\t\t//I've arbitrarily decided I want the internal representation \n\t\t\t\t//to always be an array \n\t\t\t\tthis.selectedItems = !isEmptyStr(selectedItems) ? [selectedItems] : [];\n\t\t\t\tthis.selectedSet = new Set(this.selectedItems);\n\t\t\t\tthis.propagateChange && this.propagateChange(this.selectedItems);\n\t\t\t}\n\t\t\telse if(selectedItems.length <= 1) {\n\t\t\t\tthis.selectedSet = new Set(selectedItems);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow Error('When not using multi-select, '\n\t\t\t\t\t+ 'provided value cannot be array with more than 1 item.');\n\t\t\t}\n\t\t}\n\t\tthis.selectConfig = {...this.selectConfig,\n\t\t\tselectedSet: this.selectedSet\n\t\t};\n\t\tthis.selectConfig$.next(this.selectConfig);\n\t}\n\n\tprivate _openMenu(): void {\n\t\tif(this.isDisabled || (this.optionElements?.length || 0) < 1) return;\n\t\tthis.isOpen = true;\n\t\tthis.containerClass = openMenuClass;\n\t\tsetTimeout(() => {\n\t\t\tthis.optionsParent.nativeElement.focus();\n\t\t});\n\t}\n\n\tprivate _closeMenu(): void {\n\t\tthis.isOpen = false;\n\t\tthis.containerClass = closedMenuClass;\n\t\tthis.highlightedMenuItemIdx = -1;\n\t\tthis.propagateTouch && this.propagateTouch();\n\t}\n\t\n\tonFocus(): void {\n\t\tthis._openMenu();\n\t}\n\n\t//this needs to be a focusout rather than a simple blur\n\t//because we want to get the focus event of the options themselves\n\t//otherwise, if an option is selected and we click out, this wont fire\n\tonFocusOut(): void {\n\t\t//this timeout is a hack.\n\t\t//we don't want the blur action to occur if a child is focused\n\t\t//especially since it will occur as we tab through the options\n\t\t//we can check for active element, but first focus goes to body\n\t\t//before switching to our element. the setTimeout tosses our work to the end \n\t\t//of the queue so that by then the activeElement is our option\n\n\t\tsetTimeout(() => {\n\t\t\t//reminder element is the whole thing\n\t\t\tconst element = this.elRef.nativeElement.children[0] as HTMLElement;\n\t\t\t// document.activeElement is likely to be the one of the options\n\t\t\tif(!element.contains(document.activeElement) || element === document.activeElement) {\n\t\t\t\tthis._closeMenu();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _menuOptionHighlight(newIdx: number): void {\n\t\tconst optionsElementsArr = this.optionElements.toArray();\n\t\tconst nextHighlighted = optionsElementsArr[newIdx];\n\t\tnextHighlighted.elementRef.nativeElement.focus();\n\t\tthis.highlightedMenuItemIdx = newIdx;\n\t}\n\n\tprivate _highlightSearchedOption(e: KeyboardEvent) {\n\t\tconst optionElements = this.optionElements.toArray();\n\t\tconst idx = this.highlightedMenuItemIdx;\n\t\tconst newIdx = optionElements.findIndex(\n\t\t\t(option: SelectOptionComponent) => {\n\t\t\t\tif(!option.value) return false;\n\t\t\t\tconst upKey = e.key.toLocaleUpperCase();\n\t\t\t\tconst upStr = option.content.toLocaleUpperCase()\n\t\t\t\treturn upStr.startsWith(upKey);\n\t\t});\n\t\tif(newIdx > -1) {\n\t\t\tif(idx > -1) {\n\t\t\t\tthis._menuOptionHighlight(newIdx);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst option = optionElements[newIdx];\n\t\t\t\toption.elementRef.nativeElement.focus();\n\t\t\t\tthis.highlightedMenuItemIdx = newIdx;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _chooseOption(): void {\n\t\tconst optionElements = this.optionElements.toArray();\n\t\tconst optionElement = optionElements[this.highlightedMenuItemIdx];\n\t\toptionElement.selected = true;\n\t\tthis.onChecked(optionElement);\n\t}\n\n\tprivate _openMenuKeydownEventBranches(e: KeyboardEvent) {\n\t\t\n\t\tif((e.key === ' ') && this.highlightedMenuItemIdx > -1) {\n\t\t\tthis._chooseOption();\n\t\t\tif(!this.allowMultiSelect) {\n\t\t\t\tconst element = this.elRef.nativeElement.children[0];\n\t\t\t\tfocusNext(element);\n\t\t\t}\n\t\t\te.preventDefault();\n\t\t}\n\t\telse if(e.key === 'Enter') {\n\t\t\tif(this.allowMultiSelect) {\n\t\t\t\tthis._closeMenu();\n\t\t\t}\n\t\t\telse if(this.highlightedMenuItemIdx > -1) {\n\t\t\t\tthis._chooseOption();\n\t\t\t}\n\t\t\tconst element = this.elRef.nativeElement.children[0];\n\t\t\tfocusNext(element);\n\t\t}\n\t\telse if(e.key === 'ArrowUp') {\n\t\t\tconst idx = this.highlightedMenuItemIdx;\n\t\t\tif(idx > 0) {\n\t\t\t\tthis._menuOptionHighlight(idx - 1);\n\t\t\t}\n\t\t\te.preventDefault();\n\t\t}\n\t\telse if(e.key === 'ArrowDown') {\n\t\t\tconst idx = this.highlightedMenuItemIdx;\n\t\t\tif(idx < this.optionElements.length -1) {\n\t\t\t\tthis._menuOptionHighlight(idx + 1);\n\t\t\t}\n\t\t\te.preventDefault();\n\t\t}\n\t\telse if(skippedKeys.has(e.key)) {\n\t\t\tnoop();\n\t\t}\n\t\telse {\n\t\t\tthis._highlightSearchedOption(e);\n\t\t}\n\t}\n\n\n\t@HostListener('window:keydown',['$event'])\n\tonKeyDown(e: KeyboardEvent): void {\n\t\tif(this.isOpen && this.optionElements?.length > 0) {\n\t\t\tthis._openMenuKeydownEventBranches(e);\n\t\t}\n\t}\n\n\tshowTagList(): boolean {\n\t\tif(this.allowMultiSelect) {\n\t\t\treturn this.hasSelectedValue();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _replaceValues(selected: unknown[]): void {\n\t\tconsole.log(selected);\n\t\tthis.selectedItems = selected;\n\t\tthis.selectedSet = new Set(selected);\n\t\tthis.onSelected.emit([...selected]);\n\t\tthis.propagateChange && this.propagateChange([...selected]);\n\t\tthis.selectConfig = {...this.selectConfig,\n\t\t\tselectedSet: this.selectedSet\n\t\t};\n\t\tthis.selectConfig$.next(this.selectConfig);\n\t}\n\n\tprivate _toggleOptionMulti(option: DSInput): void {\n\t\tif(!option.value) return;\n\t\tconst selectedArray = this.selectedItems;\n\t\tconst items = selectedArray.filter(t => t !== option.value);\n\t\t//if no items were matched to be removed, then add instead\n\t\tif(items.length === selectedArray.length) {\n\t\t\titems.push(option.value);\n\t\t}\n\t\tthis._replaceValues(items);\n\t}\n\n\tprivate _toggleOptionSingle(option: SelectOptionComponent): void {\n\t\tthis._replaceValues((option && option.value) ? [option.value] : []);\n\t\tthis._closeMenu();\n\t}\n\n\tonChecked(option: SelectOptionComponent): void {\n\t\tif(!option) return;\n\t\tif(this.allowMultiSelect) {\n\t\t\tthis._toggleOptionMulti(option);\n\t\t}\n\t\telse {\n\t\t\tthis._toggleOptionSingle(option);\n\t\t}\n\t}\n\n\tonTagXClicked(option: DSInput) {\n\t\tif(!option) return;\n\t\tthis._toggleOptionMulti(option);\n\t\tthis.propagateTouch && this.propagateTouch();\n\t}\n\n\thasSelectedValue(): boolean {\n\t\treturn !!this.selectedItems && this.selectedItems.length > 0;\n\t}\n\n\tgetSingularDisplayValue(): string {\n\t\tconsole.log('display');\n\t\tconst selected = this.selectedItems[0];\n\t\tconsole.log(selected);\n\t\tif(!selected) return this.defaultDisplay;\n\t\tif(this.keyContentMap.has(selected)) {\n\t\t\treturn this.lookupContent(selected);\n\t\t};\n\t\treturn selected as string;\n\t}\n\n\tlookupContent(value: unknown): string {\n\t\tif(this.keyContentMap.has(value)) {\n\t\t\treturn this.keyContentMap.get(value);\n\t\t}\n\t\treturn value as string;\n\t}\n\n\tngDestroy(): void {\n\t\tthis.childrenChangeUnsub?.unsubscribe();\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles'\n\n:host \n\tvertical-align: middle\n\tborder-radius: styles.$rounding-standard\n\n.ds-menu-button \n\toutline-width: 0\n\n.tag-list\n\tmargin-top: .2em\n\n.single-tag\n\tbackground-color: styles.$bg-color-menu1\n\tcolor: styles.$fg-color-menu-text\n\tpadding: .2em\n\tmargin: .2em\n\tcursor: default\n\tborder-radius: styles.$rounding-standard\n\tfont-size: 12px\n\n.single-tag button\n\t@extend %btn-common\n\n.menu-container-base, %menu-container-base\n\tfont-size: styles.$data-font-size\n\tmax-width: 200px\n\tborder-width: styles.$input-border-width\n\tposition: relative\n\n.menu-container-closed\n\t@extend %menu-container-base\n\n.menu-container-open\n\t@extend %menu-container-base\n\t\n\t\n\t&:focus\n\t\toutline-style: none\n\n.option-menu\n\tbackground-color: styles.$bg-color-content \n\tbox-shadow: -1px 3px 8px 0px black\n\tborder-radius: styles.$rounding-standard\n\tposition: absolute\n\ttop: -.5em\n\tleft: .08em\n\tpadding: .1em 0\n\tz-index: 1\n\tmin-width: 200px\n\n\n.menu-container-disabled\n\tcolor: styles.$fg-color-disabled-text\n\n\t&:focus\n\t\toutline-style: none\n\n\n.select-open-icon\n\tfloat: right\n\n.closed-select-default\n\tcolor: #787878\n\t\n.closed-select-default.select-picked-value\n\tcolor: #000\n\n\n.ng-invalid.ng-touched:host .closed-select-default\n\tcolor: red\n\n:host\n\tdisplay: inline-block\n\tborder-radius: styles.$rounding-standard\n\tborder-width: styles.$input-border-width\n\tborder-style: solid\n\tborder-color: #767676\n\tpadding: 2px 0",
                    "styleUrl": "./select.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "selectConfig$",
                        "type": "BehaviorSubject<SelectConfig>"
                    }
                ],
                "line": 93,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectConfig$",
                        "type": "BehaviorSubject<SelectConfig>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<!-- I made this a div because I feel weird about having a div inside a span\n-->\n<div class=\"ds-menu-button {{containerClass}}\" \n\t[tabindex]=\"tabNum\" \n\trole=\"listbox\"\n\t(focus)=\"onFocus()\"\n\t[id]=\"topId\"\n>\n<app-tag-list *ngIf=\"showTagList()\" \n\t(onRemoved)=\"onTagXClicked($event)\"\n>\n\t<app-tag-item [value]=\"option\" *ngFor=\"let option of selectedItems\">\n\t\t{{lookupContent(option)}}\n\t</app-tag-item>\n</app-tag-list>\n\t<span \n\t\t#custom \n\t\tclass=\"closed-select-default\" \n\t\t[ngStyle]=\"customStyle\"\n\t>\n\t\t<ng-container>\n\t\t\t<ng-content *ngIf=\"!showTagList()\"></ng-content>\n\t\t</ng-container>\n\t</span>\n\t<span \n\t\t*ngIf=\"!showTagList() && (custom.childNodes | elementFilter).length === 0\" \n\t\tclass=\"closed-select-default {{hasSelectedValue() ? 'select-picked-value' : ''}}\"\n\t\t[ngStyle]=\"customStyle\"\n\t>\n\t\t{{getSingularDisplayValue()}}\n\t</span>\n\t<ds-hide-icon \n\t\t[hidden]=\"isOpen || isDisabled || (optionsParent.childNodes | elementFilter).length < 1\"\n\t\t[strokeColor]=\"hasError ? 'red' : 'black'\" \n\t\twidth=\".8em\" \n\t\theight=\".8em\"\n\t\tclass=\"select-open-icon\"\n\t>\n\t</ds-hide-icon>\n\t<!-- the tabindex=\"-1\" is needed so that it can be focused on-->\n\t<div \n\t\t[hidden]=\"!isOpen\" \n\t\tclass=\"option-menu\" \n\t\t(focusout)=\"onFocusOut()\"\n\t\ttabindex=\"-1\" \n\t\t#optionsParent\n\t>\n\t\t<ng-content select=\"app-select-option\"></ng-content>\n\t</div>\n</div>"
        },
        {
            "name": "SelectOptionComponent",
            "id": "component-SelectOptionComponent-21565ae952183e50b2f7416876033477",
            "file": "src/app/shared/components/select/select-option/select-option.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-option",
            "styleUrls": [
                "./select-option.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./select-option.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "name",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "-1",
                    "line": 25
                },
                {
                    "name": "value",
                    "line": 22,
                    "type": "unknown"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'optionElement'"
                        }
                    ]
                },
                {
                    "name": "inialized",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onClickCallback",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, \n\tElementRef, \n\tInject, \n\tInput, \n\tOnInit,      \n\tViewChild, \n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { nodeFirst } from 'src/app/shared/utils/domHelper';\nimport { DSInput } from 'src/app/types/ds-input';\nimport { SelectConfig, SELECT_CONFIG } from '../select-config';\n\n\n@Component({\n  selector: 'app-select-option',\n  templateUrl: './select-option.component.html',\n  styleUrls: ['./select-option.component.sass']\n})\nexport class SelectOptionComponent implements OnInit, DSInput {\n\n\t@Input('multiple') allowMultiSelect: boolean = false;\n\t@Input('value') value: unknown;\n\t@Input('selected') selected: boolean;\n\t@Input('name') controlName: string;\n\t@Input('tabindex') tabNum = -1;\n\tcontent = '';\n\tonClickCallback: (option: SelectOptionComponent) => void;\n\n\tprivate inialized: boolean;\n\n\t//this is for outside to mess with\n\t@ViewChild('optionElement') elementRef: ElementRef;\n\n  constructor(private elRef: ElementRef,\n\t\t@Inject(SELECT_CONFIG) \n\t\tprivate selectConfig$: BehaviorSubject<SelectConfig | null>) \n\t{}\n\n  ngOnInit(): void {\n\t\tthis.selectConfig$.subscribe((config: SelectConfig) => {\n\t\t\tif(!config) return;\n\t\t\tif(!this.inialized) {\n\t\t\t\tthis.inialized = true;\n\t\t\t\tconst registration = config.register();\n\t\t\t\tthis.allowMultiSelect = config.allowMultiSelect;\n\t\t\t\tthis.controlName = `option-${config.controlName}-${registration.idx}`;\n\t\t\t\tthis.onClickCallback = config.onClickCallback;\n\t\t\t}\n\t\t\tthis.selected = config.selectedSet?.has(this.value);\n\t\t});\n\t}\n\n\tngAfterViewChecked(): void {\n\t\tconst first = nodeFirst(this.elRef?.nativeElement?.children);\n\t\tthis.content = first?.textContent || '';\n\t}\n\n\tonClick(): void {\n\t\tthis.onClickCallback && this.onClickCallback(this);\n\t}\n\t\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../../styles'\n\n\n.menu-item\n\theight: 1em\n\tmargin: .1em 0\n\tpadding: .2em 0\n\n\t&:hover\n\t\tbackground: styles.$bg-color-menu1\n\t\tcolor: styles.$fg-color-menu-text\n\n\t&:focus\n\t\tbackground: styles.$bg-color-menu1\n\t\tcolor: styles.$fg-color-menu-text\n\t\toutline-style: none\n\t\n\t&::after\n\t\tcontent: ''\n\t\tdisplay: inline-block\n\t\twidth: 10%\n\t\tmax-width: 200px\n\t\tmin-width: 50px\n\n.highlighted-menu-item\n\tbackground: styles.$bg-color-menu1\n\tcolor: styles.$fg-color-menu-text\n\n.menu-item-content\n\tmargin-left: .2em",
                    "styleUrl": "./select-option.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "selectConfig$",
                        "type": "BehaviorSubject<SelectConfig | null>"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectConfig$",
                        "type": "BehaviorSubject<SelectConfig | null>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "DSInput"
            ],
            "templateData": "<div \n\t#optionElement\n\tclass=\"menu-item\"\t\n\t[tabindex]=\"tabNum\"\n\trole=\"option\"\n\t(click)=\"onClick()\"\n>\n\t<span class=\"menu-item-content\">\n\t\t\t<input \n\t\t\t\ttabindex=\"-1\"\n\t\t\t\t*ngIf=\"allowMultiSelect\"\n\t\t\t\ttype=\"checkbox\" \n\t\t\t\t[name]=\"name\"\n\t\t\t\t[checked]=\"selected\"\n\t\t\t/>\n\t\t\t<span *ngIf=\"!allowMultiSelect\">\n\t\t\t\t<span *ngIf=\"selected\">&#10003;</span>\n\t\t\t</span>\n\t\t\t<span>\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</span>\n\t</span>\n</div>"
        },
        {
            "name": "SkillLevelFormComponent",
            "id": "component-SkillLevelFormComponent-92413eb40b256478ef980a4cd7771e5c",
            "file": "src/app/comp-rules-setup/skill-level-form/skill-level-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-skill-level-form",
            "styleUrls": [
                "./skill-level-form.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./skill-level-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "skillLevelsChoice",
                    "defaultValue": "CompKeys.skillLevels",
                    "line": 17,
                    "type": "SkillLevelsChoice"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "compSetupServiceUnsub",
                    "type": "Unsubscribable",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "firstInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'firstInput'"
                        }
                    ]
                },
                {
                    "name": "skillLevels",
                    "defaultValue": "[]",
                    "type": "SkillLevel[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onRowRemoveClick",
                    "args": [
                        {
                            "name": "skillLevel",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "skillLevel",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reorderClick",
                    "args": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<SkillLevel>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "eventArg",
                            "type": "DirectionEventArg<SkillLevel>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Unsubscribable } from 'rxjs';\nimport { CompetitionSetupService, CompKeys } from 'src/app/services/competition-setup/competition-setup.service';\nimport { Competition, SkillLevel } from 'src/app/types/data-shape';\nimport { DirectionEventArg } from 'src/app/types/directions';\n\nexport type SkillLevelsChoice = CompKeys.skillLevels | CompKeys.multiEventSkillLevels;\n\n@Component({\n  selector: 'app-skill-level-form',\n  templateUrl: './skill-level-form.component.html',\n  styleUrls: ['./skill-level-form.component.sass']\n})\nexport class SkillLevelFormComponent implements OnInit {\n\n\t@Input('skillLevelsChoice') skillLevelsChoice: SkillLevelsChoice = CompKeys.skillLevels;\n\tcompSetupServiceUnsub: Unsubscribable;\n\tskillLevels: SkillLevel[] = [];\n\n\t@ViewChild('firstInput') firstInput: ElementRef;\n\n\tconstructor(private competitionSetup$: CompetitionSetupService) \n\t{ }\n\n  ngOnInit(): void {\n\t\tthis.compSetupServiceUnsub = this.competitionSetup$.subscribe(\n\t\t\t(value: Competition) => {\n\t\t\t\tthis.skillLevels = value[this.skillLevelsChoice];\n\t\t\t}\n\t\t);\n\t}\n\n\treorderClick(eventArg: DirectionEventArg<SkillLevel>): void {\n\t\tthis.competitionSetup$\n\t\t\t.moveItem(eventArg.item, eventArg.direction, this.skillLevelsChoice);\n\t}\n\n\tonSubmit(formGroup: FormGroup): void {\n\n\t\tif(!formGroup.valid){\n\t\t\tformGroup.markAllAsTouched();\n\t\t}\n\t\telse {\n\t\t\tconst formVal = formGroup.value;\n\t\t\tthis.competitionSetup$.saveItem({\n\t\t\t\t...formVal,\n\t\t\t\torder: null,\n\t\t\t\tkey: null,\n\t\t\t}, this.skillLevelsChoice);\n\t\t\tformGroup.reset({}, {emitEvent: false});\n\t\t\t(this.firstInput.nativeElement as HTMLElement).focus();\n\t\t}\n\t}\n\n\tonRowRemoveClick(skillLevel): void {\n\t\tthis.competitionSetup$\n\t\t\t.removeItems(i => i.id !== skillLevel.id, this.skillLevelsChoice);\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.compSetupServiceUnsub.unsubscribe();\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../styles'\n@use '../comp-rules-setup.component' as pageParent\n\ntd:nth-child(2)\n\twidth: 90px\n\ntd, th\n\tpadding-left: pageParent.$cell-left-padding",
                    "styleUrl": "./skill-level-form.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "competitionSetup$",
                        "type": "CompetitionSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form \n\t#skillLevelForm=\"ngForm\" \n\t(ngSubmit)=\"onSubmit(skillLevelForm.form)\" \n\tdsAgeRangeValidator\n\tautocomplete=\"off\"\n>\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th></th>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr *ngFor=\"let skillLevel of skillLevels\">\n\t\t\t\t<td>\n\t\t\t\t\t<ds-up-down (reorderClick)=\"reorderClick($event)\" \n\t\t\t\t\t\t[associatedItem]=\"skillLevel\"\n\t\t\t\t\t\t[size]=\"skillLevels.length\"\n\t\t\t\t\t>\n\t\t\t\t\t</ds-up-down>\n\t\t\t\t</td>\n\t\t\t\t<td>{{skillLevel.name}}</td>\n\t\t\t\t<td><button (click)=\"onRowRemoveClick(skillLevel)\" \n\t\t\t\t\ttype=\"button\" \n\t\t\t\t\tclass=\"add-row-btn\">-</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot>\n\t\t\t<tr>\n\t\t\t\t<td></td>\n\t\t\t\t<td>\n\t\t\t\t\t<label for=\"name\">Name</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\tname=\"name\" \n\t\t\t\t\t\tngModel \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tclass=\"age-group-width\"\n\t\t\t\t\t\t#name=\"ngModel\"\n\t\t\t\t\t\t#firstInput\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<div \n\t\t\t\t\t\t*ngIf=\"!(name.valid || name.untouched)\" \n\t\t\t\t\t\tclass=\"input-error-label\"\n\t\t\t\t\t>\n\t\t\t\t\t\tName is required\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<button class=\"add-row-btn\">+</button>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n</form>"
        },
        {
            "name": "TagItemComponent",
            "id": "component-TagItemComponent-b6dbf7226e2ed7afba261d262154182d",
            "file": "src/app/shared/components/select/tag-item/tag-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tag-item",
            "styleUrls": [
                "./tag-item.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./tag-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "tabindex",
                    "defaultValue": "-1",
                    "line": 18
                },
                {
                    "name": "value",
                    "line": 14,
                    "type": "unknown"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "inialized",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onClickCallback",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onTagXClicked",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { nodeFirst } from 'src/app/shared/utils/domHelper';\nimport { DSInput } from 'src/app/types/ds-input';\nimport { TagsConfig, TAGS_CONFIG } from '../tags-config';\n\n@Component({\n  selector: 'app-tag-item',\n  templateUrl: './tag-item.component.html',\n  styleUrls: ['./tag-item.component.sass']\n})\nexport class TagItemComponent implements OnInit, DSInput {\n\n\t@Input('value') value: unknown;\n\t@Input('readonly') readonly: boolean;\n\t@Input('name') controlName: string;\n\tonClickCallback: (option: TagItemComponent) => void;\n\t@Input('tabindex') tabNum = -1;\n\tcontent = '';\n\tprivate inialized: boolean;\n\t\n\tconstructor(private elRef: ElementRef, \n\t\t@Inject(TAGS_CONFIG) private tagsConfig$: BehaviorSubject<TagsConfig>) { }\n\n  ngOnInit(): void {\n\t\tthis.tagsConfig$.subscribe((config: TagsConfig) => {\n\t\t\tif(!config) return;\n\t\t\tif(!this.inialized) {\n\t\t\t\tthis.inialized = true;\n\t\t\t\tconst registration = config.register();\n\t\t\t\tthis.controlName = `tag-${config.controlName}-${registration.idx}`;\n\t\t\t\tthis.onClickCallback = config.onClickCallback;\n\t\t\t\tthis.readonly = !config.showXButton;\n\t\t\t}\n\t\t});\n\t}\n\t\n\tonTagXClicked(e: MouseEvent) {\n\t\tthis.onClickCallback && this.onClickCallback(this);\n\t\te.stopPropagation();\n\t}\n\n\tngAfterViewChecked(): void {\n\t\tconst first = nodeFirst(this.elRef?.nativeElement?.children);\n\t\tthis.content = first?.textContent || '';\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../../styles'\n\t\n.single-tag\n\tbackground-color: styles.$bg-color-menu1\n\tcolor: styles.$fg-color-menu-text\n\tpadding: .2em .2em .2em .4em\n\tmargin: .2em\n\tcursor: default\n\tborder-radius: styles.$rounding-standard\n\tfont-size: 12px\n\tdisplay: inline-flex\n\talign-items: center\n\n.single-tag button\n\tmargin: .2em\n\t@extend %btn-common",
                    "styleUrl": "./tag-item.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "tagsConfig$",
                        "type": "BehaviorSubject<TagsConfig>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagsConfig$",
                        "type": "BehaviorSubject<TagsConfig>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "DSInput"
            ],
            "templateData": "<span class=\"single-tag\" [id]=\"controlName\">\n\t<span class=\"tag-content\">\n\t\t<ng-content></ng-content>\n\t</span>\n\t<button *ngIf=\"!readonly\" (click)=\"onTagXClicked($event)\">\n\t\tX\n\t</button>\n</span>"
        },
        {
            "name": "TagListComponent",
            "id": "component-TagListComponent-196a5eb9e4b9e2ce82bf28734bb5e6a9",
            "file": "src/app/shared/components/tag-list/tag-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: TAGS_CONFIG, useFactory: () => new BehaviorSubject<TagsConfig>(null)\n}"
                }
            ],
            "selector": "app-tag-list",
            "styleUrls": [
                "./tag-list.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./tag-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 20
                },
                {
                    "name": "readonly",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "line": 21,
                    "type": "any[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemoved",
                    "defaultValue": "new EventEmitter<DSInput>()",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "optionMaxIdx",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tagConfig",
                    "type": "TagsConfig",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onTagXClicked",
                    "args": [
                        {
                            "name": "option",
                            "type": "DSInput"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "DSInput",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, OnInit, Output } \n\tfrom '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { DSInput } from 'src/app/types/ds-input';\nimport { TagsConfig, TAGS_CONFIG } from '../select/tags-config';\n\n@Component({\n  selector: 'app-tag-list',\n  templateUrl: './tag-list.component.html',\n\tstyleUrls: ['./tag-list.component.sass'],\n\tproviders: [\n\t\t{\n\t\t\tprovide: TAGS_CONFIG,\n\t\t\tuseFactory: () => new BehaviorSubject<TagsConfig>(null)\n\t\t},\n\t]\n})\nexport class TagListComponent implements OnInit {\n\n\t@Input('name') controlName = '';\n\t@Input('value') tags: any[];\n\t@Input('readonly') readonly: boolean;\n\t@Output('onRemoved') removedEvent = new EventEmitter<DSInput>();\n\toptionMaxIdx: number = 0; \n\ttagConfig: TagsConfig;\n\n\t\n  constructor(@Inject(TAGS_CONFIG) private tagConfig$: BehaviorSubject<TagsConfig>) { }\n\n  ngOnInit(): void {\n\t\tthis.tagConfig = {\n\t\t\tonClickCallback: this.onTagXClicked.bind(this),\n\t\t\tcontrolName: this.controlName,\n\t\t\tregister: () => ({ idx: this.optionMaxIdx++ }),\n\t\t\tshowXButton: this.removedEvent.observers.length > 0.\n\t\t};\n\t\tthis.tagConfig$.next(this.tagConfig);\n\t}\n\t\n\tonTagXClicked(option: DSInput): void {\n\t\tthis.removedEvent.emit(option);\n\t}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles'\n\n.tag-list\n\tmargin-top: .2em\n\tdisplay: inline-flex\n\tflex-wrap: wrap\n\tmax-width: 90%\n\n.single-tag\n\tbackground-color: styles.$bg-color-menu1\n\tcolor: styles.$fg-color-menu-text\n\tpadding: .2em\n\tmargin: .2em\n\tcursor: default\n\tborder-radius: styles.$rounding-standard\n\tfont-size: 12px\n\tdisplay: inline-flex\n\n.single-tag button\n\tmargin: .2em\n\t@extend %btn-common",
                    "styleUrl": "./tag-list.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "tagConfig$",
                        "type": "BehaviorSubject<TagsConfig>"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "tagConfig$",
                        "type": "BehaviorSubject<TagsConfig>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span class=\"tag-list\">\n\t<ng-content select=\"app-tag-item\"></ng-content>\n</span>"
        },
        {
            "name": "UpDownComponent",
            "id": "component-UpDownComponent-c79bc6b2b1cb145cda98a10245507f1e",
            "file": "src/app/shared/components/up-down/up-down.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ds-up-down",
            "styleUrls": [
                "./up-down.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./up-down.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "associatedItem",
                    "line": 14,
                    "type": "Sortable"
                },
                {
                    "name": "size",
                    "line": 15,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "reorderClick",
                    "defaultValue": "new EventEmitter<DirectionEventArg<Sortable>>()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "direction",
                    "defaultValue": "Direction",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "reorderClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "Sortable"
                        },
                        {
                            "name": "direction",
                            "type": "ElevatorDir"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Sortable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "direction",
                            "type": "ElevatorDir",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ElevatorDir, Direction, DirectionEventArg } from '../../../types/directions';\nimport { Sortable } from '../../../types/sortable';\n\n@Component({\n  selector: 'ds-up-down',\n  templateUrl: './up-down.component.html',\n  styleUrls: ['./up-down.component.sass']\n})\nexport class UpDownComponent implements OnInit {\n\t\n\t@Output('reorderClick') arrowClick = \n\t\tnew EventEmitter<DirectionEventArg<Sortable>>();\n\t@Input() associatedItem: Sortable;\n\t@Input() size: number;\n\tdirection = Direction;\n\n  constructor() { }\n\n  ngOnInit(): void {\n\t}\n\t\n\treorderClick(item: Sortable, direction: ElevatorDir): void {\n\t\tthis?.arrowClick.emit({ item, direction });\n\t}\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../styles'\n\t\n.order-btn\n\tbackground-color: styles.$bg-color-content\n\tcolor: styles.$border-color-input\n\tdisplay: block\n\twidth: 1em\n\theight: 1em",
                    "styleUrl": "./up-down.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<button \n\t*ngIf=\"associatedItem.order > 0\"\n\tclass=\"order-btn\" \n\t(click)=\"reorderClick(associatedItem, direction.Down)\"\n\ttype=\"button\"\t\n>\n\t<svg viewBox=\"0 0 6 6\">\n\t\t<path d=\"M1,4.5 l4,0 l-2,-3\" />\n\t</svg>\n</button>\n<button \n\t*ngIf=\"associatedItem.order < size - 1\"\n\tclass=\"order-btn\" \n\t(click)=\"reorderClick(associatedItem, direction.Up)\"\n\ttype=\"button\"\t\n>\n\t<svg viewBox=\"0 0 6 6\">\n\t\t<path d=\"M1,1.5 l4,0 l-2,3\" />\n\t</svg>\t\n</button>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddCompModalComponent"
                        },
                        {
                            "name": "AgeGroupFormComponent"
                        },
                        {
                            "name": "AgeRangeValidatorDirective"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CategoryFormComponent"
                        },
                        {
                            "name": "CompRulesSetupComponent"
                        },
                        {
                            "name": "CoupleListComponent"
                        },
                        {
                            "name": "DanceFormComponent"
                        },
                        {
                            "name": "EditPersonModalComponent"
                        },
                        {
                            "name": "EditSchoolModalComponent"
                        },
                        {
                            "name": "ElementFilterPipe"
                        },
                        {
                            "name": "ExpandIconComponent"
                        },
                        {
                            "name": "HideIconComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MultiDanceFormComponent"
                        },
                        {
                            "name": "PersonListComponent"
                        },
                        {
                            "name": "RouteFilterPipe"
                        },
                        {
                            "name": "SchoolListComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SelectOptionComponent"
                        },
                        {
                            "name": "SkillLevelFormComponent"
                        },
                        {
                            "name": "TagItemComponent"
                        },
                        {
                            "name": "TagListComponent"
                        },
                        {
                            "name": "UpDownComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "allRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/routeDefintions.ts",
                "type": "DanceSchedulerRoute[]",
                "defaultValue": "[\n\t{\n\t\tpath: '',\n\t\tcomponent: HomeComponent,\n\t\tdisplay: 'Home',\n\t\tmodeFilter: ModeAccess.All,\n\t\troleFilter: RoleAccess.All\n\t},\n\t{ \n\t\tpath: 'dancers', \n\t\tcomponent: PersonListComponent, \n\t\tdisplay: 'Dancers', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n\t{\n\t\tpath: 'schools',\n\t\tcomponent: SchoolListComponent,\n\t\tdisplay: 'Schools',\n\t\tmodeFilter: ModeAccess.All,\n\t\troleFilter: RoleAccess.AdminOnly\n\t},\n\t{ \n\t\tpath: 'couples', \n\t\tcomponent: CoupleListComponent, \n\t\tdisplay: 'Couples', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n\t{ \n\t\tpath: 'compVars', \n\t\tcomponent: CompRulesSetupComponent, \n\t\tdisplay: 'Variations', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n]"
            },
            {
                "name": "closedMenuClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.component.ts",
                "type": "string",
                "defaultValue": "'menu-container-closed ds-select'"
            },
            {
                "name": "compBaseShape",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/competition-setup/competition-setup.service.ts",
                "type": "Competition",
                "defaultValue": "{\n\tid: null,\n\tname: '',\n\tageGroups: [],\n\tmultiEventAgeGroups: [],\n\tcategories: [],\n\tdances: [],\n\tmultiDances: [],\n\tskillLevels: [],\n\tmultiEventSkillLevels: [],\n\tdancers: [],\n\theats: [],\n\tjudges: [],\n\tdateOfComp: null,\n\teventDate: null,\n\tlastUpdated: null,\n\tfinished: false,\n\tcreateDate: null,\n}"
            },
            {
                "name": "COMPETITION_TABLE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "string",
                "defaultValue": "'competitions'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DANCE_SCHEDULER_LOCAL_DB_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "string",
                "defaultValue": "\"danceSchedulerLocalDb\""
            },
            {
                "name": "DANCE_SCHEDULER_LOCAL_DB_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "DataBasic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/data-basic.ts",
                "type": "string",
                "defaultValue": "'DataBasic'"
            },
            {
                "name": "DEFAULT_COMPETITION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/constants.ts",
                "type": "DataKey",
                "defaultValue": "\"default\""
            },
            {
                "name": "disabledMenuClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.component.ts",
                "type": "string",
                "defaultValue": "'menu-container-disabled'"
            },
            {
                "name": "DSInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/ds-input.ts",
                "type": "",
                "defaultValue": "undefined"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/select.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `<app-select></app-select>`\n})"
            },
            {
                "name": "EMPTY_COMPETITION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/constants.ts",
                "type": "DataKey",
                "defaultValue": "\"empty\""
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/callCounter.stories.ts",
                "type": "Story<CallCounterComponent>",
                "defaultValue": "(args: CallCounterComponent) => ({\n  component: CallCounterComponent,\n  props: args,\n})"
            },
            {
                "name": "HasOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/select.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `<app-select>\n\t\t<app-select-option\n\t\t\tvalue=\"123\"\n\t\t>\n\t\t\tOption 1\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"234\"\n\t\t>\n\t\t\tOption 2\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"345\"\n\t\t>\n\t\t\tOption 3\n\t\t</app-select-option>\n\t</app-select>`\n})"
            },
            {
                "name": "HasOptionsMultiInstanceName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/select.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `\n\t<div>\n\t\t<app-select name=\"alpha\">\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"123\"\n\t\t\t>\n\t\t\t\tOption 1\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"234\"\n\t\t\t>\n\t\t\t\tOption 2\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"345\"\n\t\t\t>\n\t\t\t\tOption 3\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t<div>\n\t\t<app-select name=\"bravo\">\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"123\"\n\t\t\t>\n\t\t\t\tOption 1\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"234\"\n\t\t\t>\n\t\t\t\tOption 2\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"345\"\n\t\t\t>\n\t\t\t\tOption 3\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t`\n})"
            },
            {
                "name": "HasOptionsMultiInstanceNoName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/select.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `\n\t<div>\n\t\t<app-select>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"123\"\n\t\t\t>\n\t\t\t\tOption 1\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"234\"\n\t\t\t>\n\t\t\t\tOption 2\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"345\"\n\t\t\t>\n\t\t\t\tOption 3\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t<div>\n\t\t<app-select>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"123\"\n\t\t\t>\n\t\t\t\tOption 1\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"234\"\n\t\t\t>\n\t\t\t\tOption 2\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"345\"\n\t\t\t>\n\t\t\t\tOption 3\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t`\n})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Multi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/taglist.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `\n\t<div>\n\t\t<app-tag-list name=\"alpha\">\n\t\t\t<app-tag-item value=\"123\">\n\t\t\t\tOption 1\n\t\t\t</app-tag-item>\n\t\t\t<app-tag-item value=\"234\">\n\t\t\t\tOption 2\n\t\t\t</app-tag-item>\n\t\t\t<app-tag-item value=\"345\">\n\t\t\t\tOption 3\n\t\t\t</app-tag-item>\t\n\t\t</app-tag-list>\n\t</div>\n\t<div>\n\t<app-tag-list name=\"bravo\">\n\t\t<app-tag-item value=\"123\">\n\t\t\tOption 1\n\t\t</app-tag-item>\n\t\t<app-tag-item value=\"234\">\n\t\t\tOption 2\n\t\t</app-tag-item>\n\t\t<app-tag-item value=\"345\">\n\t\t\tOption 3\n\t\t</app-tag-item>\t\n\t</app-tag-list>\n\t</div>\n\t`\n})"
            },
            {
                "name": "MultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/select.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `<app-select\n\t\tmultiple=\"true\"\n\t>\n\t\t<app-select-option\n\t\t\tvalue=\"123\"\n\t\t>\n\t\t\tOption 1\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"234\"\n\t\t>\n\t\t\tOption 2\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"345\"\n\t\t>\n\t\t\tOption 3\n\t\t</app-select-option>\n\t</app-select>`\n})"
            },
            {
                "name": "MultiSelectPreSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/select.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `<app-select\n\t\tmultiple=\"true\"\n\t\t[value]=\"['123','234']\"\n\t>\n\t\t<app-select-option\n\t\t\tvalue=\"123\"\n\t\t>\n\t\t\tOption 1\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"234\"\n\t\t>\n\t\t\tOption 2\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"345\"\n\t\t>\n\t\t\tOption 3\n\t\t</app-select-option>\n\t</app-select>`\n})"
            },
            {
                "name": "MultiSelectPreSelectStringValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/select.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `<app-select\n\t\tmultiple=\"true\"\n\t\tvalue=\"123,234\"\n\t>\n\t\t<app-select-option\n\t\t\tvalue=\"123\"\n\t\t>\n\t\t\tOption 1\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"234\"\n\t\t>\n\t\t\tOption 2\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"345\"\n\t\t>\n\t\t\tOption 3\n\t\t</app-select-option>\n\t</app-select>`\n})"
            },
            {
                "name": "openMenuClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.component.ts",
                "type": "string",
                "defaultValue": "'menu-container-open ds-select'"
            },
            {
                "name": "PEOPLE_TABLE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "string",
                "defaultValue": "'people'"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Example.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/callCounter.stories.ts",
                "type": "",
                "defaultValue": "Example.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SCHOOL_TABLE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "string",
                "defaultValue": "'schools'"
            },
            {
                "name": "SELECT_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select-config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<BehaviorSubject<SelectConfig>>(\n\t'select config'\n)"
            },
            {
                "name": "SelectRegistration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select-registration.ts",
                "type": "",
                "defaultValue": "undefined"
            },
            {
                "name": "skippedKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.component.ts",
                "type": "",
                "defaultValue": "new Set([\n\t'Backspace',\n\t'Tab',\n\t'F1',\n\t'F1',\n\t'F2',\n\t'F3',\n\t'F4',\n\t'F5',\n\t'F6',\n\t'F7',\n\t'F8',\n\t'F9',\n\t'F10',\n\t'F11',\n\t'F12'\n])"
            },
            {
                "name": "Sortable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/types/sortable.ts",
                "type": "",
                "defaultValue": "undefined"
            },
            {
                "name": "TAGS_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/tags-config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<BehaviorSubject<TagsConfig>>(\n\t'tag config'\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `<storybook-button miText=\"howdy\"></storybook-button>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/callCounter.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `<callCounter></callCounter>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/taglist.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ({\n\ttemplate: `\n\t<app-tag-list>\n\t\t<app-tag-item value=\"123\">\n\t\t\tOption 1\n\t\t</app-tag-item>\n\t\t<app-tag-item value=\"234\">\n\t\t\tOption 2\n\t\t</app-tag-item>\n\t\t<app-tag-item value=\"345\">\n\t\t\tOption 3\n\t\t</app-tag-item>\t\n\t</app-tag-list>`\n})"
            }
        ],
        "functions": [
            {
                "name": "asArray",
                "file": "src/app/shared/utils/arrayHelpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "first",
                "file": "src/app/shared/utils/arrayHelpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "T | null",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "focusNext",
                "file": "src/app/shared/utils/domHelper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "current"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "current",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLatest",
                "file": "src/app/shared/utils/arrayHelpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "T | null",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getLatestIdx",
                "file": "src/app/shared/utils/arrayHelpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "immutableReplace",
                "file": "src/app/shared/utils/arrayHelpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arr"
                    },
                    {
                        "name": "value"
                    },
                    {
                        "name": "idx"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idx",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isAValue",
                "file": "src/app/shared/utils/anyHelper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "returnType": "Boolean",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isEmptyStr",
                "file": "src/app/shared/utils/anyHelper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "last",
                "file": "src/app/shared/utils/arrayHelpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "T | null",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nodeFirst",
                "file": "src/app/shared/utils/domHelper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "nodes"
                    }
                ],
                "returnType": "Node",
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stripDownObj",
                "file": "src/app/shared/utils/objectHelpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "obj"
                    },
                    {
                        "name": "shallowPaths"
                    }
                ],
                "returnType": "Object | null",
                "jsdoctags": [
                    {
                        "name": "obj",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shallowPaths",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "swap",
                "file": "src/app/shared/utils/arrayHelpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "array"
                    },
                    {
                        "name": "idx0"
                    },
                    {
                        "name": "idx1"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "array",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idx0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "idx1",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AgeGroupChoice",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "CompKeys.ageGroups | CompKeys.multiEventAgeGroups",
                "file": "src/app/comp-rules-setup/age-group-form/age-group-form.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "CompKeyChoices",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/services/competition-setup/competition-setup.service.ts",
                "description": "",
                "kind": 174
            },
            {
                "name": "CompSubType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AgeGroupType | Category | Dance | SkillLevel | MultiDance",
                "file": "src/app/types/data-shape.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "DataKey",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | number",
                "file": "src/app/types/data-key.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ElevatorDir",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Direction.Up | Direction.Down",
                "file": "src/app/types/directions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "plus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/types/data-shape.ts",
                "description": "",
                "kind": 177
            },
            {
                "name": "SkillLevelsChoice",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "CompKeys.skillLevels | CompKeys.multiEventSkillLevels",
                "file": "src/app/comp-rules-setup/skill-level-form/skill-level-form.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TableTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Competition | Person | School",
                "file": "src/app/types/data-shape.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "CompKeys",
                "childs": [
                    {
                        "name": "ageGroups",
                        "value": "ageGroups"
                    },
                    {
                        "name": "categories",
                        "value": "categories"
                    },
                    {
                        "name": "dances",
                        "value": "dances"
                    },
                    {
                        "name": "multiDances",
                        "value": "multiDances"
                    },
                    {
                        "name": "skillLevels",
                        "value": "skillLevels"
                    },
                    {
                        "name": "multiEventAgeGroups",
                        "value": "multiEventAgeGroups"
                    },
                    {
                        "name": "multiEventSkillLevels",
                        "value": "multiEventSkillLevels"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/services/competition-setup/competition-setup.service.ts"
            },
            {
                "name": "Direction",
                "childs": [
                    {
                        "name": "Up"
                    },
                    {
                        "name": "Down"
                    },
                    {
                        "name": "Left"
                    },
                    {
                        "name": "Right"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/types/directions.ts"
            },
            {
                "name": "ModeAccess",
                "childs": [
                    {
                        "name": "All"
                    },
                    {
                        "name": "CompetitionSetup"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/routeDefintions.ts"
            },
            {
                "name": "RoleAccess",
                "childs": [
                    {
                        "name": "All"
                    },
                    {
                        "name": "AdminOnly"
                    },
                    {
                        "name": "Judge"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/routeDefintions.ts"
            },
            {
                "name": "RoleType",
                "childs": [
                    {
                        "name": "Admin",
                        "value": "ADMIN"
                    },
                    {
                        "name": "Judge",
                        "value": "JUDGE"
                    },
                    {
                        "name": "DataEntry",
                        "value": "DATA_ENTRY"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/types/roles.ts"
            }
        ],
        "groupedVariables": {
            "src/app/routeDefintions.ts": [
                {
                    "name": "allRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/routeDefintions.ts",
                    "type": "DanceSchedulerRoute[]",
                    "defaultValue": "[\n\t{\n\t\tpath: '',\n\t\tcomponent: HomeComponent,\n\t\tdisplay: 'Home',\n\t\tmodeFilter: ModeAccess.All,\n\t\troleFilter: RoleAccess.All\n\t},\n\t{ \n\t\tpath: 'dancers', \n\t\tcomponent: PersonListComponent, \n\t\tdisplay: 'Dancers', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n\t{\n\t\tpath: 'schools',\n\t\tcomponent: SchoolListComponent,\n\t\tdisplay: 'Schools',\n\t\tmodeFilter: ModeAccess.All,\n\t\troleFilter: RoleAccess.AdminOnly\n\t},\n\t{ \n\t\tpath: 'couples', \n\t\tcomponent: CoupleListComponent, \n\t\tdisplay: 'Couples', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n\t{ \n\t\tpath: 'compVars', \n\t\tcomponent: CompRulesSetupComponent, \n\t\tdisplay: 'Variations', \n\t\tmodeFilter: ModeAccess.CompetitionSetup,\n\t\troleFilter: RoleAccess.AdminOnly \n\t},\n]"
                }
            ],
            "src/app/shared/components/select/select.component.ts": [
                {
                    "name": "closedMenuClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.component.ts",
                    "type": "string",
                    "defaultValue": "'menu-container-closed ds-select'"
                },
                {
                    "name": "disabledMenuClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.component.ts",
                    "type": "string",
                    "defaultValue": "'menu-container-disabled'"
                },
                {
                    "name": "openMenuClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.component.ts",
                    "type": "string",
                    "defaultValue": "'menu-container-open ds-select'"
                },
                {
                    "name": "skippedKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.component.ts",
                    "type": "",
                    "defaultValue": "new Set([\n\t'Backspace',\n\t'Tab',\n\t'F1',\n\t'F1',\n\t'F2',\n\t'F3',\n\t'F4',\n\t'F5',\n\t'F6',\n\t'F7',\n\t'F8',\n\t'F9',\n\t'F10',\n\t'F11',\n\t'F12'\n])"
                }
            ],
            "src/app/services/competition-setup/competition-setup.service.ts": [
                {
                    "name": "compBaseShape",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/competition-setup/competition-setup.service.ts",
                    "type": "Competition",
                    "defaultValue": "{\n\tid: null,\n\tname: '',\n\tageGroups: [],\n\tmultiEventAgeGroups: [],\n\tcategories: [],\n\tdances: [],\n\tmultiDances: [],\n\tskillLevels: [],\n\tmultiEventSkillLevels: [],\n\tdancers: [],\n\theats: [],\n\tjudges: [],\n\tdateOfComp: null,\n\teventDate: null,\n\tlastUpdated: null,\n\tfinished: false,\n\tcreateDate: null,\n}"
                }
            ],
            "src/app/services/browser-Db/browser-db.service.ts": [
                {
                    "name": "COMPETITION_TABLE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/browser-Db/browser-db.service.ts",
                    "type": "string",
                    "defaultValue": "'competitions'"
                },
                {
                    "name": "DANCE_SCHEDULER_LOCAL_DB_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/browser-Db/browser-db.service.ts",
                    "type": "string",
                    "defaultValue": "\"danceSchedulerLocalDb\""
                },
                {
                    "name": "DANCE_SCHEDULER_LOCAL_DB_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/browser-Db/browser-db.service.ts",
                    "type": "number",
                    "defaultValue": "1"
                },
                {
                    "name": "PEOPLE_TABLE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/browser-Db/browser-db.service.ts",
                    "type": "string",
                    "defaultValue": "'people'"
                },
                {
                    "name": "SCHOOL_TABLE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/browser-Db/browser-db.service.ts",
                    "type": "string",
                    "defaultValue": "'schools'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/types/data-basic.ts": [
                {
                    "name": "DataBasic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/data-basic.ts",
                    "type": "string",
                    "defaultValue": "'DataBasic'"
                }
            ],
            "src/app/types/constants.ts": [
                {
                    "name": "DEFAULT_COMPETITION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/constants.ts",
                    "type": "DataKey",
                    "defaultValue": "\"default\""
                },
                {
                    "name": "EMPTY_COMPETITION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/constants.ts",
                    "type": "DataKey",
                    "defaultValue": "\"empty\""
                }
            ],
            "src/app/types/ds-input.ts": [
                {
                    "name": "DSInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/ds-input.ts",
                    "type": "",
                    "defaultValue": "undefined"
                }
            ],
            "src/stories/select.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/select.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `<app-select></app-select>`\n})"
                },
                {
                    "name": "HasOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/select.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `<app-select>\n\t\t<app-select-option\n\t\t\tvalue=\"123\"\n\t\t>\n\t\t\tOption 1\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"234\"\n\t\t>\n\t\t\tOption 2\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"345\"\n\t\t>\n\t\t\tOption 3\n\t\t</app-select-option>\n\t</app-select>`\n})"
                },
                {
                    "name": "HasOptionsMultiInstanceName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/select.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `\n\t<div>\n\t\t<app-select name=\"alpha\">\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"123\"\n\t\t\t>\n\t\t\t\tOption 1\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"234\"\n\t\t\t>\n\t\t\t\tOption 2\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"345\"\n\t\t\t>\n\t\t\t\tOption 3\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t<div>\n\t\t<app-select name=\"bravo\">\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"123\"\n\t\t\t>\n\t\t\t\tOption 1\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"234\"\n\t\t\t>\n\t\t\t\tOption 2\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"345\"\n\t\t\t>\n\t\t\t\tOption 3\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t`\n})"
                },
                {
                    "name": "HasOptionsMultiInstanceNoName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/select.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `\n\t<div>\n\t\t<app-select>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"123\"\n\t\t\t>\n\t\t\t\tOption 1\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"234\"\n\t\t\t>\n\t\t\t\tOption 2\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"345\"\n\t\t\t>\n\t\t\t\tOption 3\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t<div>\n\t\t<app-select>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"123\"\n\t\t\t>\n\t\t\t\tOption 1\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"234\"\n\t\t\t>\n\t\t\t\tOption 2\n\t\t\t</app-select-option>\n\t\t\t<app-select-option\n\t\t\t\tvalue=\"345\"\n\t\t\t>\n\t\t\t\tOption 3\n\t\t\t</app-select-option>\n\t\t</app-select>\n\t</div>\n\t`\n})"
                },
                {
                    "name": "MultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/select.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `<app-select\n\t\tmultiple=\"true\"\n\t>\n\t\t<app-select-option\n\t\t\tvalue=\"123\"\n\t\t>\n\t\t\tOption 1\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"234\"\n\t\t>\n\t\t\tOption 2\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"345\"\n\t\t>\n\t\t\tOption 3\n\t\t</app-select-option>\n\t</app-select>`\n})"
                },
                {
                    "name": "MultiSelectPreSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/select.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `<app-select\n\t\tmultiple=\"true\"\n\t\t[value]=\"['123','234']\"\n\t>\n\t\t<app-select-option\n\t\t\tvalue=\"123\"\n\t\t>\n\t\t\tOption 1\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"234\"\n\t\t>\n\t\t\tOption 2\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"345\"\n\t\t>\n\t\t\tOption 3\n\t\t</app-select-option>\n\t</app-select>`\n})"
                },
                {
                    "name": "MultiSelectPreSelectStringValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/select.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `<app-select\n\t\tmultiple=\"true\"\n\t\tvalue=\"123,234\"\n\t>\n\t\t<app-select-option\n\t\t\tvalue=\"123\"\n\t\t>\n\t\t\tOption 1\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"234\"\n\t\t>\n\t\t\tOption 2\n\t\t</app-select-option>\n\t\t<app-select-option\n\t\t\tvalue=\"345\"\n\t\t>\n\t\t\tOption 3\n\t\t</app-select-option>\n\t</app-select>`\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Example.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `<storybook-button miText=\"howdy\"></storybook-button>`\n})"
                }
            ],
            "src/stories/callCounter.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/callCounter.stories.ts",
                    "type": "Story<CallCounterComponent>",
                    "defaultValue": "(args: CallCounterComponent) => ({\n  component: CallCounterComponent,\n  props: args,\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/callCounter.stories.ts",
                    "type": "",
                    "defaultValue": "Example.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/callCounter.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `<callCounter></callCounter>`\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/taglist.stories.ts": [
                {
                    "name": "Multi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/taglist.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `\n\t<div>\n\t\t<app-tag-list name=\"alpha\">\n\t\t\t<app-tag-item value=\"123\">\n\t\t\t\tOption 1\n\t\t\t</app-tag-item>\n\t\t\t<app-tag-item value=\"234\">\n\t\t\t\tOption 2\n\t\t\t</app-tag-item>\n\t\t\t<app-tag-item value=\"345\">\n\t\t\t\tOption 3\n\t\t\t</app-tag-item>\t\n\t\t</app-tag-list>\n\t</div>\n\t<div>\n\t<app-tag-list name=\"bravo\">\n\t\t<app-tag-item value=\"123\">\n\t\t\tOption 1\n\t\t</app-tag-item>\n\t\t<app-tag-item value=\"234\">\n\t\t\tOption 2\n\t\t</app-tag-item>\n\t\t<app-tag-item value=\"345\">\n\t\t\tOption 3\n\t\t</app-tag-item>\t\n\t</app-tag-list>\n\t</div>\n\t`\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/taglist.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n\ttemplate: `\n\t<app-tag-list>\n\t\t<app-tag-item value=\"123\">\n\t\t\tOption 1\n\t\t</app-tag-item>\n\t\t<app-tag-item value=\"234\">\n\t\t\tOption 2\n\t\t</app-tag-item>\n\t\t<app-tag-item value=\"345\">\n\t\t\tOption 3\n\t\t</app-tag-item>\t\n\t</app-tag-list>`\n})"
                }
            ],
            "src/app/shared/components/select/select-config.ts": [
                {
                    "name": "SELECT_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select-config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<BehaviorSubject<SelectConfig>>(\n\t'select config'\n)"
                }
            ],
            "src/app/shared/components/select/select-registration.ts": [
                {
                    "name": "SelectRegistration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select-registration.ts",
                    "type": "",
                    "defaultValue": "undefined"
                }
            ],
            "src/app/types/sortable.ts": [
                {
                    "name": "Sortable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/types/sortable.ts",
                    "type": "",
                    "defaultValue": "undefined"
                }
            ],
            "src/app/shared/components/select/tags-config.ts": [
                {
                    "name": "TAGS_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/tags-config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<BehaviorSubject<TagsConfig>>(\n\t'tag config'\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/utils/arrayHelpers.ts": [
                {
                    "name": "asArray",
                    "file": "src/app/shared/utils/arrayHelpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "first",
                    "file": "src/app/shared/utils/arrayHelpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "T | null",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatest",
                    "file": "src/app/shared/utils/arrayHelpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "T | null",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLatestIdx",
                    "file": "src/app/shared/utils/arrayHelpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "immutableReplace",
                    "file": "src/app/shared/utils/arrayHelpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arr"
                        },
                        {
                            "name": "value"
                        },
                        {
                            "name": "idx"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "last",
                    "file": "src/app/shared/utils/arrayHelpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "T | null",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "swap",
                    "file": "src/app/shared/utils/arrayHelpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "array"
                        },
                        {
                            "name": "idx0"
                        },
                        {
                            "name": "idx1"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/utils/domHelper.ts": [
                {
                    "name": "focusNext",
                    "file": "src/app/shared/utils/domHelper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "current"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "current",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nodeFirst",
                    "file": "src/app/shared/utils/domHelper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "nodes"
                        }
                    ],
                    "returnType": "Node",
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/utils/anyHelper.ts": [
                {
                    "name": "isAValue",
                    "file": "src/app/shared/utils/anyHelper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "returnType": "Boolean",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmptyStr",
                    "file": "src/app/shared/utils/anyHelper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/utils/objectHelpers.ts": [
                {
                    "name": "stripDownObj",
                    "file": "src/app/shared/utils/objectHelpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "obj"
                        },
                        {
                            "name": "shallowPaths"
                        }
                    ],
                    "returnType": "Object | null",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shallowPaths",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/services/competition-setup/competition-setup.service.ts": [
                {
                    "name": "CompKeys",
                    "childs": [
                        {
                            "name": "ageGroups",
                            "value": "ageGroups"
                        },
                        {
                            "name": "categories",
                            "value": "categories"
                        },
                        {
                            "name": "dances",
                            "value": "dances"
                        },
                        {
                            "name": "multiDances",
                            "value": "multiDances"
                        },
                        {
                            "name": "skillLevels",
                            "value": "skillLevels"
                        },
                        {
                            "name": "multiEventAgeGroups",
                            "value": "multiEventAgeGroups"
                        },
                        {
                            "name": "multiEventSkillLevels",
                            "value": "multiEventSkillLevels"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/services/competition-setup/competition-setup.service.ts"
                }
            ],
            "src/app/types/directions.ts": [
                {
                    "name": "Direction",
                    "childs": [
                        {
                            "name": "Up"
                        },
                        {
                            "name": "Down"
                        },
                        {
                            "name": "Left"
                        },
                        {
                            "name": "Right"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/types/directions.ts"
                }
            ],
            "src/app/routeDefintions.ts": [
                {
                    "name": "ModeAccess",
                    "childs": [
                        {
                            "name": "All"
                        },
                        {
                            "name": "CompetitionSetup"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/routeDefintions.ts"
                },
                {
                    "name": "RoleAccess",
                    "childs": [
                        {
                            "name": "All"
                        },
                        {
                            "name": "AdminOnly"
                        },
                        {
                            "name": "Judge"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/routeDefintions.ts"
                }
            ],
            "src/app/types/roles.ts": [
                {
                    "name": "RoleType",
                    "childs": [
                        {
                            "name": "Admin",
                            "value": "ADMIN"
                        },
                        {
                            "name": "Judge",
                            "value": "JUDGE"
                        },
                        {
                            "name": "DataEntry",
                            "value": "DATA_ENTRY"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/types/roles.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/comp-rules-setup/age-group-form/age-group-form.component.ts": [
                {
                    "name": "AgeGroupChoice",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "CompKeys.ageGroups | CompKeys.multiEventAgeGroups",
                    "file": "src/app/comp-rules-setup/age-group-form/age-group-form.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/services/competition-setup/competition-setup.service.ts": [
                {
                    "name": "CompKeyChoices",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/services/competition-setup/competition-setup.service.ts",
                    "description": "",
                    "kind": 174
                }
            ],
            "src/app/types/data-shape.ts": [
                {
                    "name": "CompSubType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AgeGroupType | Category | Dance | SkillLevel | MultiDance",
                    "file": "src/app/types/data-shape.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "plus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/types/data-shape.ts",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "TableTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Competition | Person | School",
                    "file": "src/app/types/data-shape.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/types/data-key.ts": [
                {
                    "name": "DataKey",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | number",
                    "file": "src/app/types/data-key.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/types/directions.ts": [
                {
                    "name": "ElevatorDir",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Direction.Up | Direction.Down",
                    "file": "src/app/types/directions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/comp-rules-setup/skill-level-form/skill-level-form.component.ts": [
                {
                    "name": "SkillLevelsChoice",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "CompKeys.skillLevels | CompKeys.multiEventSkillLevels",
                    "file": "src/app/comp-rules-setup/skill-level-form/skill-level-form.component.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": "allRoutes",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/add-comp-modal/add-comp-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCompModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/comp-rules-setup/age-group-form/age-group-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgeGroupFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/comp-rules-setup/category-form/category-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/comp-rules-setup/comp-rules-setup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CompRulesSetupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/comp-rules-setup/dance-form/dance-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DanceFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/comp-rules-setup/multi-dance-form/multi-dance-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiDanceFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/comp-rules-setup/skill-level-form/skill-level-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkillLevelFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/couple-list/couple-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoupleListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/person-list/edit-person-modal/edit-person-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditPersonModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/person-list/person-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/routeDefintions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DanceSchedulerRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/routeDefintions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DisplayRoute",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/routeDefintions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/school-list/edit-school-modal/edit-school-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditSchoolModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/school-list/school-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchoolListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BrowserDbService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPETITION_TABLE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DANCE_SCHEDULER_LOCAL_DB_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DANCE_SCHEDULER_LOCAL_DB_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PEOPLE_TABLE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/browser-Db/browser-db.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SCHOOL_TABLE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/competition-setup/competition-setup.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CompetitionSetupService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/services/competition-setup/competition-setup.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "compBaseShape",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/list/list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListService",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/services/op-queue/op-queue.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OpQueueService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/persons/persons.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PersonsService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/services/schools/schools.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SchoolsService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/services/userAuth/user-auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAuthService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icons/icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpandIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icons/icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HideIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECT_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select-option/select-option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectOptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select-registration.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SelectRegistration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/52",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "closedMenuClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabledMenuClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openMenuClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "skippedKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/tag-item/tag-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/tags-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TagsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/tags-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TAGS_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tag-list/tag-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/up-down/up-down.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpDownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/element-filter/element-filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ElementFilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/routeFilter/route-filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RouteFilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/DanceAppDataSource.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DanceAppDataSource",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/anyHelper.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isAValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/anyHelper.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isEmptyStr",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/arrayHelpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "asArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/arrayHelpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "first",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/arrayHelpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getLatest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/arrayHelpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getLatestIdx",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/arrayHelpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "immutableReplace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/arrayHelpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "last",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/arrayHelpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "swap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/domHelper.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "focusNext",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/domHelper.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "nodeFirst",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/objectHelpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "stripDownObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_COMPETITION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMPTY_COMPETITION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-basic.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DataBasic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AgeGroupType",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Competition",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Couple",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CoupledDance",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dance",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DanceCommon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DanceDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DanceDtoCommon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dancer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Heat",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MultiDance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MultiDanceDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Person",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PersonBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PersonDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "School",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/data-shape.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SkillLevel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/directions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DirectionEventArg",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/ds-input.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DSInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/id-selectable.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IdSelectable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/name-displayable.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NameDisplayable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/option-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OptionInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/social-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SocialEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/sortable.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sortable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/table-stats.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableStats",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/touch-timestamp.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TouchedTimestamp",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/types/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/types/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/validators/age-range-validator.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AgeRangeValidatorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/callCounter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CallCounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/stories/callCounter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/callCounter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/callCounter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HasOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HasOptionsMultiInstanceName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HasOptionsMultiInstanceNoName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelectPreSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelectPreSelectStringValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/taglist.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/taglist.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}